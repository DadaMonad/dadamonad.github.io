{"version":3,"sources":["Types/JsonTypes.coffee"],"names":[],"mappings":"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","file":"Types/JsonTypes.js","sourceRoot":"/source/","sourcesContent":["text_types_uninitialized = require \"./TextTypes\"\n\nmodule.exports = (HB)->\n  text_types = text_types_uninitialized HB\n  types = text_types.types\n  parser = text_types.parser\n\n  createJsonTypeWrapper = (_jsonType)->\n\n    #\n    # @note EXPERIMENTAL\n    #\n    # A JsonTypeWrapper was intended to be a convenient wrapper for the JsonType.\n    # But it can make things more difficult than they are.\n    # @see JsonType\n    #\n    # @example create a JsonTypeWrapper\n    #   # You get a JsonTypeWrapper from a JsonType by calling\n    #   w = yatta.value\n    #\n    # It creates Javascripts -getter and -setter methods for each property that JsonType maintains.\n    # @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n    #\n    # @example Getter Example\n    #   # you can access the x property of yatta by calling\n    #   w.x\n    #   # instead of\n    #   yatta.val('x')\n    #\n    # @note You can only overwrite existing values! Setting a new property won't have any effect!\n    #\n    # @example Setter Example\n    #   # you can set an existing x property of yatta by calling\n    #   w.x = \"text\"\n    #   # instead of\n    #   yatta.val('x', \"text\")\n    #\n    # In order to set a new property you have to overwrite an existing property.\n    # Therefore the JsonTypeWrapper supports a special feature that should make things more convenient\n    # (we can argue about that, use the JsonType if you don't like it ;).\n    # If you overwrite an object property of the JsonTypeWrapper with a new object, it will result in a merged version of the objects.\n    # Let `yatta.value.p` the property that is to be overwritten and o the new value. E.g. `yatta.value.p = o`\n    # * The result has all properties of o\n    # * The result has all properties of w.p if they don't occur under the same property-name in o.\n    #\n    # @example Conflict Example\n    #   yatta.value = {a : \"string\"}\n    #   w = yatta.value\n    #   console.log(w) # {a : \"string\"}\n    #   w.a = {a : {b : \"string\"}}\n    #   console.log(w) # {a : {b : \"String\"}}\n    #   w.a = {a : {c : 4}}\n    #   console.log(w) # {a : {b : \"String\", c : 4}}\n    #\n    # @example Common Pitfalls\n    #   w = yatta.value\n    #   # Setting a new property\n    #   w.newProperty = \"Awesome\"\n    #   console.log(w.newProperty == \"Awesome\") # false, w.newProperty is undefined\n    #   # overwrite the w object\n    #   w = {newProperty : \"Awesome\"}\n    #   console.log(w.newProperty == \"Awesome\") # true!, but ..\n    #   console.log(yatta.value.newProperty == \"Awesome\") # false, you are only allowed to set properties!\n    #   # The solution\n    #   yatta.value = {newProperty : \"Awesome\"}\n    #   console.log(w.newProperty == \"Awesome\") # true!\n    #\n    class JsonTypeWrapper\n\n      #\n      # @param {JsonType} jsonType Instance of the JsonType that this class wrappes.\n      #\n      constructor: (jsonType)->\n        for name, obj of jsonType.map\n          do (name, obj)->\n            Object.defineProperty JsonTypeWrapper.prototype, name,\n              get : ->\n                x = obj.val()\n                if x instanceof JsonType\n                  createJsonTypeWrapper x\n                else if x instanceof types.ImmutableObject\n                  x.val()\n                else\n                  x\n              set : (o)->\n                overwrite = jsonType.val(name)\n                if o.constructor is {}.constructor and overwrite instanceof types.Operation\n                  for o_name,o_obj of o\n                    overwrite.val(o_name, o_obj, 'immutable')\n                else\n                  jsonType.val(name, o, 'immutable')\n              enumerable: true\n              configurable: false\n    new JsonTypeWrapper _jsonType\n\n  #\n  # Manages Object-like values.\n  #\n  class JsonType extends types.MapManager\n\n    #\n    # Identifies this class.\n    # Use it to check whether this is a json-type or something else.\n    #\n    # @example\n    #   var x = yatta.val('unknown')\n    #   if (x.type === \"JsonType\") {\n    #     console.log JSON.stringify(x.toJson())\n    #   }\n    #\n    type: \"JsonType\"\n\n    applyDelete: ()->\n      super()\n\n    cleanup: ()->\n      super()\n\n\n    #\n    # Transform this to a Json. If your browser supports Object.observe it will be transformed automatically when a change arrives.\n    # Otherwise you will loose all the sharing-abilities (the new object will be a deep clone)!\n    # @return {Json}\n    #\n    # TODO: at the moment you don't consider changing of properties.\n    # E.g.: let x = {a:[]}. Then x.a.push 1 wouldn't change anything\n    #\n    toJson: ()->\n      if not @bound_json? or not Object.observe? or true # TODO: currently, you are not watching mutable strings for changes, and, therefore, the @bound_json is not updated. TODO TODO  wuawuawua easy\n        val = @val()\n        json = {}\n        for name, o of val\n          if not o?\n            json[name] = o\n          else if o.constructor is {}.constructor\n            json[name] = @val(name).toJson()\n          else if o instanceof types.Operation\n            while o instanceof types.Operation\n              o = o.val()\n            json[name] = o\n          else\n            json[name] = o\n        @bound_json = json\n        if Object.observe?\n          that = @\n          Object.observe @bound_json, (events)->\n            for event in events\n              if not event.changedBy? and (event.type is \"add\" or event.type = \"update\")\n                # this event is not created by Yatta.\n                that.val(event.name, event.object[event.name])\n          @observe (events)->\n            for event in events\n              if event.created_ isnt HB.getUserId()\n                notifier = Object.getNotifier(that.bound_json)\n                oldVal = that.bound_json[event.name]\n                if oldVal?\n                  notifier.performChange 'update', ()->\n                      that.bound_json[event.name] = that.val(event.name)\n                    , that.bound_json\n                  notifier.notify\n                    object: that.bound_json\n                    type: 'update'\n                    name: event.name\n                    oldValue: oldVal\n                    changedBy: event.changedBy\n                else\n                  notifier.performChange 'add', ()->\n                      that.bound_json[event.name] = that.val(event.name)\n                    , that.bound_json\n                  notifier.notify\n                    object: that.bound_json\n                    type: 'add'\n                    name: event.name\n                    oldValue: oldVal\n                    changedBy:event.changedBy\n      @bound_json\n\n    #\n    # Whether the default is 'mutable' (true) or 'immutable' (false)\n    #\n    mutable_default:\n      true\n\n    #\n    # Set if the default is 'mutable' or 'immutable'\n    # @param {String|Boolean} mutable Set either 'mutable' / true or 'immutable' / false\n    setMutableDefault: (mutable)->\n      if mutable is true or mutable is 'mutable'\n        JsonType.prototype.mutable_default = true\n      else if mutable is false or mutable is 'immutable'\n        JsonType.prototype.mutable_default = false\n      else\n        throw new Error 'Set mutable either \"mutable\" or \"immutable\"!'\n      'OK'\n\n    #\n    # @overload val()\n    #   Get this as a Json object.\n    #   @return [Json]\n    #\n    # @overload val(name)\n    #   Get value of a property.\n    #   @param {String} name Name of the object property.\n    #   @return [JsonType|WordType|String|Object] Depending on the value of the property. If mutable it will return a Operation-type object, if immutable it will return String/Object.\n    #\n    # @overload val(name, content)\n    #   Set a new property.\n    #   @param {String} name Name of the object property.\n    #   @param {Object|String} content Content of the object property.\n    #   @return [JsonType] This object. (supports chaining)\n    #\n    val: (name, content, mutable)->\n      if name? and arguments.length > 1\n        if mutable?\n          if mutable is true or mutable is 'mutable'\n            mutable = true\n          else\n            mutable = false\n        else\n          mutable = @mutable_default\n        if typeof content is 'function'\n          @ # Just do nothing\n        else if (not content?) or (((not mutable) or typeof content is 'number') and content.constructor isnt Object)\n          super name, (new types.ImmutableObject undefined, content).execute()\n        else\n          if typeof content is 'string'\n            word = (new types.WordType undefined).execute()\n            word.insertText 0, content\n            super name, word\n          else if content.constructor is Object\n            json = new JsonType().execute()\n            for n,o of content\n              json.val n, o, mutable\n            super name, json\n          else\n            throw new Error \"You must not set #{typeof content}-types in collaborative Json-objects!\"\n      else\n        super name, content\n\n    Object.defineProperty JsonType.prototype, 'value',\n      get : -> createJsonTypeWrapper @\n      set : (o)->\n        if o.constructor is {}.constructor\n          for o_name,o_obj of o\n            @val(o_name, o_obj, 'immutable')\n        else\n          throw new Error \"You must only set Object values!\"\n\n    #\n    # @private\n    #\n    _encode: ()->\n      {\n        'type' : \"JsonType\"\n        'uid' : @getUid()\n      }\n\n  parser['JsonType'] = (json)->\n    {\n      'uid' : uid\n    } = json\n    new JsonType uid\n\n\n\n\n  types['JsonType'] = JsonType\n\n  text_types\n\n\n"]}