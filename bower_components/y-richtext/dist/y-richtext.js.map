{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/Richtext.js","y-richtext.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","extend","Y","requestModules","then","YRichtext","_Y$Array$class","os","_model","idArray","valArray","this","_this","getPrototypeOf","instances","_createClass","key","map","v","join","createNewOp","attrs","name","op","attributes","insert","ops","Array","push","pos","content","curPos","selection","_get","split","curSel","endPos","delStart","delEnd","rightSel","undefined","from","to","attrName","attrValue","step2i","step2sel","antiAttrs","_v","deletes","_v2","j","del","performStep4","sel","quill","mutualExcluse","token","setContents","toOTOps","on","delta","select","retain","afterRetain","additionalContent","getText","insertText","formatText","observe","events","event","type","position","insertSel","index","newSel","selectionStart","selectionEnd","k","delLength","deleteText","x","editor","checkUpdate","regeneratorRuntime","mark","_changed","_args","arguments","wrap","_context","prev","next","forEach","delegateYield","apply","stop","get","toString","utils","CustomType","class","struct","initType","YTextInitializer","model","_context2","Struct","List","c","JSON","stringify","id","t0","abrupt","defineProperties","target","props","descriptor","defineProperty","protoProps","staticProps","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter"],"mappings":"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","file":"y-richtext.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y) {\n  Y.requestModules(['Array']).then(function () {\n    class YRichtext extends Y.Array['class'] {\n      constructor (os, _model, idArray, valArray) {\n        super(os, _model, idArray, valArray)\n        this.instances = []\n      }\n      get length () {\n        /*\n          TODO: I must not use observe to compute the length.\n          But since I inherit from Y.Array, I can't set observe\n          the changes at the right momet (for that I would require direct access to EventHandler).\n          This is the most elegant solution, for now.\n          But at some time you should re-write Y.Richtext more elegantly!!\n        */\n        return this.toString().length\n      }\n      toString () {\n        return this.valArray.map(function (v) {\n          if (typeof v === 'string') {\n            return v\n          }\n        }).join('')\n      }\n      toOTOps () {\n        var ops = []\n        var op = {\n          insert: [],\n          attributes: {}\n        }\n        function createNewOp () {\n          var attrs = {}\n          // copy attributes\n          for (var name in op.attributes) {\n            attrs[name] = op.attributes[name]\n          }\n          op = {\n            insert: [],\n            attributes: attrs\n          }\n        }\n        var i = 0\n        for (; i < this.valArray.length; i++) {\n          let v = this.valArray[i]\n          if (v.constructor === Array) {\n            if (op.insert.length > 0) {\n              op.insert = op.insert.join('')\n              ops.push(op)\n              createNewOp()\n            }\n            if (v[1] === null) {\n              delete op.attributes[v[0]]\n            } else {\n              op.attributes[v[0]] = v[1]\n            }\n          } else {\n            op.insert.push(v)\n          }\n        }\n        if (op.insert.length > 0) {\n          op.insert = op.insert.join('')\n          ops.push(op)\n        }\n        return ops\n      }\n      insert (pos, content) {\n        var curPos = 0\n        var selection = {}\n        for (var i = 0; i < this.valArray.length; i++) {\n          if (curPos === pos) {\n            break\n          }\n          var v = this.valArray[i]\n          if (typeof v === 'string') {\n            curPos++\n          } else if (v.constructor === Array) {\n            if (v[1] === null) {\n              delete selection[v[0]]\n            } else {\n              selection[v[0]] = v[1]\n            }\n          }\n        }\n        super.insert(i, content.split(''))\n        return selection\n      }\n      delete (pos, length) {\n        /*\n          let x = to be deleted string\n          let s = some string\n          let * = some selection\n          E.g.\n          sss*s***x*xxxxx***xx*x**ss*s\n               |---delete-range--|\n             delStart         delEnd\n\n          We'll check the following\n          * is it possible to delete some of the selections?\n            1. a dominating selection to the right could be the same as the selection (curSel) to delStart\n            2. a selections could be overwritten by another selection to the right\n        */\n        var curPos = 0\n        var curSel = {}\n        var endPos = pos + length\n        if (length <= 0) return\n        var delStart // relative to valArray\n        var delEnd // ..\n        var v, i // helper variable for elements of valArray\n\n        for (delStart = 0, v = this.valArray[delStart]; curPos < pos && delStart < this.valArray.length; v = this.valArray[++delStart]) {\n          if (typeof v === 'string') {\n            curPos++\n          } else if (v.constructor === Array) {\n            curSel[v[0]] = v[1]\n          }\n        }\n        for (delEnd = delStart, v = this.valArray[delEnd]; curPos < endPos && delEnd < this.valArray.length; v = this.valArray[++delEnd]) {\n          if (typeof v === 'string') {\n            curPos++\n          }\n        }\n        if (delEnd === this.valArray.length) {\n          // yay, you can delete everything without checking\n          for (i = delEnd - 1, v = this.valArray[i]; i >= delStart; v = this.valArray[--i]) {\n            super.delete(i, 1)\n          }\n        } else {\n          if (typeof v === 'string') {\n            delEnd--\n          }\n          var rightSel = {}\n          for (i = delEnd, v = this.valArray[i]; i >= delStart; v = this.valArray[--i]) {\n            if (v.constructor === Array) {\n              if (rightSel[v[0]] === undefined) {\n                if (v[1] === curSel[v[0]]) {\n                  // case 1.\n                  super.delete(i, 1)\n                }\n                rightSel[v[0]] = v[1]\n              } else {\n                // case 2.\n                super.delete(i, 1)\n              }\n            } else if (typeof v === 'string') {\n              // always delete the strings\n              super.delete(i, 1)\n            }\n          }\n        }\n      }\n      /*\n      1. get selection attributes from position $from\n         (name it antiAttrs, and we'll use it to make sure that selection ends in antiAttrs)\n      2. Insert selection $attr, if necessary\n      3. Between from and to, we'll delete all selections that do not match $attr.\n         Furthermore, we'll update antiAttrs, if necessary\n      4. In the end well insert a selection that makes sure that selection($to) ends in antiAttrs\n      */\n      select (from, to, attrName, attrValue) {\n        if (from == null || to == null || attrName == null || attrValue === undefined) {\n          throw new Error('You must define four parameters')\n        } else {\n          var step2i\n          var step2sel\n          var antiAttrs = [attrName, null]\n          var curPos = 0\n          var i = 0\n          // 1. compute antiAttrs\n          for (; i < this.valArray.length; i++) {\n            let v = this.valArray[i]\n            if (curPos === from) {\n              break\n            }\n            if (v.constructor === Array) {\n              if (v[0] === attrName) {\n                antiAttrs[1] = v[1]\n              }\n            } else if (typeof v === 'string') {\n              curPos++\n            }\n          }\n          // 2. Insert attr\n          if (antiAttrs[1] !== attrValue) {\n            // we'll execute this later\n            step2i = i\n            step2sel = [attrName, attrValue]\n          }\n\n          // 3. update antiAttrs, modify selection\n          var deletes = []\n          for (; i < this.valArray.length; i++) {\n            let v = this.valArray[i]\n            if (curPos === to) {\n              break\n            }\n            if (v.constructor === Array) {\n              if (v[0] === attrName) {\n                antiAttrs[1] = v[1]\n                deletes.push(i)\n              }\n            } else if (typeof v === 'string') {\n              curPos++\n            }\n          }\n          // actually delete the found selections\n          // also.. we have to delete from right to left (so that the positions dont change)\n          for (var j = deletes.length - 1; j >= 0; j--) {\n            var del = deletes[j]\n            super.delete(del, 1)\n            // update i, rel. to\n            if (del < i) {\n              i--\n            }\n            if (del < step2i) {\n              step2i--\n            }\n          }\n          // 4. Update selection to match antiAttrs\n          // never insert, if not necessary\n          //  1. when it is the last position ~ i < valArray.length)\n          //  2. when a similar attrName already exists between i and the next character\n          if (antiAttrs[1] !== attrValue && i < this.valArray.length) { // check 1.\n            var performStep4 = true\n            var v\n            for (j = i, v = this.valArray[j]; j < this.valArray.length && v.constructor === Array; v = this.valArray[++j]) {\n              if (v[0] === attrName) {\n                performStep4 = false // check 2.\n                if (v[1] === attrValue) {\n                  super.delete(j, 1)\n                }\n                break\n              }\n            }\n            if (performStep4) {\n              var sel = [attrName, antiAttrs[1]]\n              super.insert(i, [sel])\n            }\n          }\n          if (step2i != null) {\n            super.insert(step2i, [step2sel])\n            // if there are some selections to the left of step2sel, delete them if possible\n            // * have same attribute name\n            // * no insert between step2sel and selection\n            for (j = step2i - 1, v = this.valArray[j]; j >= 0 && v.constructor === Array; v = this.valArray[--j]) {\n              if (v[0] === attrName) {\n                super.delete(j, 1)\n              }\n            }\n          }\n        }\n      }\n      bind (quill) {\n        this.instances.push(quill)\n        var self = this\n\n        // this function makes sure that either the\n        // quill event is executed, or the yjs observer is executed\n        var token = true\n        function mutualExcluse (f) {\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              token = true\n              throw new Error(e)\n            }\n            token = true\n          }\n        }\n\n        quill.setContents(this.toOTOps())\n\n        quill.on('text-change', function (delta) {\n          mutualExcluse(function () {\n            var pos = 0\n            var name // helper variable\n            for (var i = 0; i < delta.ops.length; i++) {\n              var op = delta.ops[i]\n              if (op.insert != null) {\n                var attrs = self.insert(pos, op.insert)\n                // create new selection\n                for (name in op.attributes) {\n                  if (op.attributes[name] !== attrs[name]) {\n                    self.select(pos, pos + op.insert.length, name, op.attributes[name])\n                  }\n                }\n                // not-existence of an attribute in op.attributes denotes\n                // that we have to unselect (set to null)\n                for (name in attrs) {\n                  if (op.attributes == null || attrs[name] !== op.attributes[name]) {\n                    self.select(pos, pos + op.insert.length, name, null)\n                  }\n                }\n                pos += op.insert.length\n              }\n              if (op.delete != null) {\n                self.delete(pos, op.delete)\n              }\n              if (op.retain != null) {\n                var afterRetain = pos + op.retain\n                if (afterRetain > self.length) {\n                  let additionalContent = quill.getText(self.length)\n                  quill.insertText(self.length, additionalContent)\n                  // quill.deleteText(self.length + additionalContent.length, quill.getLength())\n                  for (name in op.attributes) {\n                    quill.formatText(self.length + additionalContent.length, self.length + additionalContent.length * 2, name, null)\n                    // quill.deleteText(self.length, self.length + op.retain)\n                  }\n                  self.insert(self.length, additionalContent)\n                  // op.attributes = null\n                }\n                for (name in op.attributes) {\n                  self.select(pos, pos + op.retain, name, op.attributes[name])\n                  quill.formatText(pos, pos + op.retain, name, op.attributes[name])\n                }\n                pos = afterRetain\n              }\n            }\n          })\n        })\n        this.observe(function (events) {\n          mutualExcluse(function () {\n            var v // helper variable\n            var curSel // helper variable (current selection)\n            for (var i = 0; i < events.length; i++) {\n              var event = events[i]\n              if (event.type === 'insert') {\n                if (typeof event.value === 'string') {\n                  var position = 0\n                  var insertSel = {}\n                  for (var l = event.index - 1; l >= 0; l--) {\n                    v = self.valArray[l]\n                    if (typeof v === 'string') {\n                      position++\n                    } else if (v.constructor === Array && typeof insertSel[v[0]] === 'undefined') {\n                      insertSel[v[0]] = v[1]\n                    }\n                  }\n                  quill.insertText(position, event.value, insertSel)\n                } else if (event.value.constructor === Array) {\n                  // a new selection is created\n                  // find left selection that matches newSel[0]\n                  curSel = null\n                  var newSel = event.value\n                  // denotes the start position of the selection\n                  // (without the selection objects)\n                  var selectionStart = 0\n                  for (var j = event.index - 1; j >= 0; j--) {\n                    v = self.valArray[j]\n                    if (v.constructor === Array) {\n                      // check if v matches newSel\n                      if (newSel[0] === v[0]) {\n                        // found a selection\n                        // update curSel and go to next step\n                        curSel = v[1]\n                        break\n                      }\n                    } else if (typeof v === 'string') {\n                      selectionStart++\n                    }\n                  }\n                  // make sure to decrement j, so we correctly compute selectionStart\n                  for (; j >= 0; j--) {\n                    v = self.valArray[j]\n                    if (typeof v === 'string') {\n                      selectionStart++\n                    }\n                  }\n                  // either a selection was found {then curSel was updated}, or not (then curSel = null)\n                  if (newSel[1] === curSel) {\n                    // both are the same. not necessary to do anything\n                    return\n                  }\n                  // now find out the range over which newSel has to be created\n                  var selectionEnd = selectionStart\n                  for (var k = event.index + 1; k < self.valArray.length; k++) {\n                    v = self.valArray[k]\n                    if (v.constructor === Array) {\n                      if (v[0] === newSel[0]) {\n                        // found another selection with same attr name\n                        break\n                      }\n                    } else if (typeof v === 'string') {\n                      selectionEnd++\n                    }\n                  }\n                  // create a selection from selectionStart to selectionEnd\n                  if (selectionStart !== selectionEnd) {\n                    quill.formatText(selectionStart, selectionEnd, newSel[0], newSel[1])\n                  }\n                }\n              } else if (event.type === 'delete') {\n                if (typeof event.value === 'string') { // TODO: see button. add  || `event.length > 1`\n                  // only if these conditions are true, we have to actually check if we have to delete sth.\n                  // Then we have to check if between pos and pos + event.length are selections:\n                  // delete till pos + (event.length - number of selections)\n                  var pos = 0\n                  for (var u = 0; u < event.index; u++) {\n                    v = self.valArray[u]\n                    if (typeof v === 'string') {\n                      pos++\n                    }\n                  }\n                  var delLength = event.length\n                  /* TODO!!\n                  they do not exist anymore.. so i can't query. you have to query over event.value(s) - but that not yet implemented\n                  for (; i < event.index + event.length; i++) {\n                    if (self.valArray[i].constructor === Array) {\n                      delLength--\n                    }\n                  }*/\n                  quill.deleteText(pos, pos + delLength)\n                } else if (event.value.constructor === Array) {\n                  curSel = null\n                  var from = 0\n                  var x\n                  for (x = event.index - 1; x >= 0; x--) {\n                    v = self.valArray[x]\n                    if (v.constructor === Array) {\n                      if (v[0] === event.value[0]) {\n                        curSel = v[1]\n                        break\n                      }\n                    } else if (typeof v === 'string') {\n                      from++\n                    }\n                  }\n                  for (; x >= 0; v = self.valArray[--x]) {\n                    if (typeof v === 'string') {\n                      from++\n                    }\n                  }\n                  var to = from\n                  for (x = event.index; x < self.valArray.length; x++) {\n                    v = self.valArray[x]\n                    if (v.constructor === Array) {\n                      if (v[0] === event.value[0]) {\n                        break\n                      }\n                    } else if (typeof v === 'string') {\n                      to++\n                    }\n                  }\n                  if (curSel !== event.value[1] && from !== to) {\n                    quill.formatText(from, to, event.value[0], curSel)\n                  }\n                }\n              }\n            }\n            quill.editor.checkUpdate()\n          })\n        })\n      }\n      * _changed () {\n        this.instances.forEach(function (quill) {\n          quill.editor.checkUpdate()\n        })\n        yield* Y.Array.class.prototype._changed.apply(this, arguments)\n      }\n    }\n    Y.extend('Richtext', new Y.utils.CustomType({\n      name: 'Richtext',\n      class: YRichtext,\n      struct: 'List',\n      initType: function * YTextInitializer (os, model) {\n        var valArray = []\n        var idArray = yield* Y.Struct.List.map.call(this, model, function (c) {\n          valArray.push(c.content)\n          return JSON.stringify(c.id)\n        })\n        return new YRichtext(os, model.id, idArray, valArray)\n      }\n    }))\n  })\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/* global Y */\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction extend(Y) {\n  Y.requestModules(['Array']).then(function () {\n    var YRichtext = function (_Y$Array$class) {\n      _inherits(YRichtext, _Y$Array$class);\n\n      function YRichtext(os, _model, idArray, valArray) {\n        _classCallCheck(this, YRichtext);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(YRichtext).call(this, os, _model, idArray, valArray));\n\n        _this.instances = [];\n        return _this;\n      }\n\n      _createClass(YRichtext, [{\n        key: 'toString',\n        value: function toString() {\n          return this.valArray.map(function (v) {\n            if (typeof v === 'string') {\n              return v;\n            }\n          }).join('');\n        }\n      }, {\n        key: 'toOTOps',\n        value: function toOTOps() {\n          var ops = [];\n          var op = {\n            insert: [],\n            attributes: {}\n          };\n          function createNewOp() {\n            var attrs = {};\n            // copy attributes\n            for (var name in op.attributes) {\n              attrs[name] = op.attributes[name];\n            }\n            op = {\n              insert: [],\n              attributes: attrs\n            };\n          }\n          var i = 0;\n          for (; i < this.valArray.length; i++) {\n            var v = this.valArray[i];\n            if (v.constructor === Array) {\n              if (op.insert.length > 0) {\n                op.insert = op.insert.join('');\n                ops.push(op);\n                createNewOp();\n              }\n              if (v[1] === null) {\n                delete op.attributes[v[0]];\n              } else {\n                op.attributes[v[0]] = v[1];\n              }\n            } else {\n              op.insert.push(v);\n            }\n          }\n          if (op.insert.length > 0) {\n            op.insert = op.insert.join('');\n            ops.push(op);\n          }\n          return ops;\n        }\n      }, {\n        key: 'insert',\n        value: function insert(pos, content) {\n          var curPos = 0;\n          var selection = {};\n          for (var i = 0; i < this.valArray.length; i++) {\n            if (curPos === pos) {\n              break;\n            }\n            var v = this.valArray[i];\n            if (typeof v === 'string') {\n              curPos++;\n            } else if (v.constructor === Array) {\n              if (v[1] === null) {\n                delete selection[v[0]];\n              } else {\n                selection[v[0]] = v[1];\n              }\n            }\n          }\n          _get(Object.getPrototypeOf(YRichtext.prototype), 'insert', this).call(this, i, content.split(''));\n          return selection;\n        }\n      }, {\n        key: 'delete',\n        value: function _delete(pos, length) {\n          /*\n            let x = to be deleted string\n            let s = some string\n            let * = some selection\n            E.g.\n            sss*s***x*xxxxx***xx*x**ss*s\n                 |---delete-range--|\n               delStart         delEnd\n             We'll check the following\n            * is it possible to delete some of the selections?\n              1. a dominating selection to the right could be the same as the selection (curSel) to delStart\n              2. a selections could be overwritten by another selection to the right\n          */\n          var curPos = 0;\n          var curSel = {};\n          var endPos = pos + length;\n          if (length <= 0) return;\n          var delStart; // relative to valArray\n          var delEnd; // ..\n          var v, i; // helper variable for elements of valArray\n\n          for (delStart = 0, v = this.valArray[delStart]; curPos < pos && delStart < this.valArray.length; v = this.valArray[++delStart]) {\n            if (typeof v === 'string') {\n              curPos++;\n            } else if (v.constructor === Array) {\n              curSel[v[0]] = v[1];\n            }\n          }\n          for (delEnd = delStart, v = this.valArray[delEnd]; curPos < endPos && delEnd < this.valArray.length; v = this.valArray[++delEnd]) {\n            if (typeof v === 'string') {\n              curPos++;\n            }\n          }\n          if (delEnd === this.valArray.length) {\n            // yay, you can delete everything without checking\n            for (i = delEnd - 1, v = this.valArray[i]; i >= delStart; v = this.valArray[--i]) {\n              _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, i, 1);\n            }\n          } else {\n            if (typeof v === 'string') {\n              delEnd--;\n            }\n            var rightSel = {};\n            for (i = delEnd, v = this.valArray[i]; i >= delStart; v = this.valArray[--i]) {\n              if (v.constructor === Array) {\n                if (rightSel[v[0]] === undefined) {\n                  if (v[1] === curSel[v[0]]) {\n                    // case 1.\n                    _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, i, 1);\n                  }\n                  rightSel[v[0]] = v[1];\n                } else {\n                  // case 2.\n                  _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, i, 1);\n                }\n              } else if (typeof v === 'string') {\n                // always delete the strings\n                _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, i, 1);\n              }\n            }\n          }\n        }\n        /*\n        1. get selection attributes from position $from\n           (name it antiAttrs, and we'll use it to make sure that selection ends in antiAttrs)\n        2. Insert selection $attr, if necessary\n        3. Between from and to, we'll delete all selections that do not match $attr.\n           Furthermore, we'll update antiAttrs, if necessary\n        4. In the end well insert a selection that makes sure that selection($to) ends in antiAttrs\n        */\n\n      }, {\n        key: 'select',\n        value: function select(from, to, attrName, attrValue) {\n          if (from == null || to == null || attrName == null || attrValue === undefined) {\n            throw new Error('You must define four parameters');\n          } else {\n            var step2i;\n            var step2sel;\n            var antiAttrs = [attrName, null];\n            var curPos = 0;\n            var i = 0;\n            // 1. compute antiAttrs\n            for (; i < this.valArray.length; i++) {\n              var _v = this.valArray[i];\n              if (curPos === from) {\n                break;\n              }\n              if (_v.constructor === Array) {\n                if (_v[0] === attrName) {\n                  antiAttrs[1] = _v[1];\n                }\n              } else if (typeof _v === 'string') {\n                curPos++;\n              }\n            }\n            // 2. Insert attr\n            if (antiAttrs[1] !== attrValue) {\n              // we'll execute this later\n              step2i = i;\n              step2sel = [attrName, attrValue];\n            }\n\n            // 3. update antiAttrs, modify selection\n            var deletes = [];\n            for (; i < this.valArray.length; i++) {\n              var _v2 = this.valArray[i];\n              if (curPos === to) {\n                break;\n              }\n              if (_v2.constructor === Array) {\n                if (_v2[0] === attrName) {\n                  antiAttrs[1] = _v2[1];\n                  deletes.push(i);\n                }\n              } else if (typeof _v2 === 'string') {\n                curPos++;\n              }\n            }\n            // actually delete the found selections\n            // also.. we have to delete from right to left (so that the positions dont change)\n            for (var j = deletes.length - 1; j >= 0; j--) {\n              var del = deletes[j];\n              _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, del, 1);\n              // update i, rel. to\n              if (del < i) {\n                i--;\n              }\n              if (del < step2i) {\n                step2i--;\n              }\n            }\n            // 4. Update selection to match antiAttrs\n            // never insert, if not necessary\n            //  1. when it is the last position ~ i < valArray.length)\n            //  2. when a similar attrName already exists between i and the next character\n            if (antiAttrs[1] !== attrValue && i < this.valArray.length) {\n              // check 1.\n              var performStep4 = true;\n              var v;\n              for (j = i, v = this.valArray[j]; j < this.valArray.length && v.constructor === Array; v = this.valArray[++j]) {\n                if (v[0] === attrName) {\n                  performStep4 = false; // check 2.\n                  if (v[1] === attrValue) {\n                    _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, j, 1);\n                  }\n                  break;\n                }\n              }\n              if (performStep4) {\n                var sel = [attrName, antiAttrs[1]];\n                _get(Object.getPrototypeOf(YRichtext.prototype), 'insert', this).call(this, i, [sel]);\n              }\n            }\n            if (step2i != null) {\n              _get(Object.getPrototypeOf(YRichtext.prototype), 'insert', this).call(this, step2i, [step2sel]);\n              // if there are some selections to the left of step2sel, delete them if possible\n              // * have same attribute name\n              // * no insert between step2sel and selection\n              for (j = step2i - 1, v = this.valArray[j]; j >= 0 && v.constructor === Array; v = this.valArray[--j]) {\n                if (v[0] === attrName) {\n                  _get(Object.getPrototypeOf(YRichtext.prototype), 'delete', this).call(this, j, 1);\n                }\n              }\n            }\n          }\n        }\n      }, {\n        key: 'bind',\n        value: function bind(quill) {\n          this.instances.push(quill);\n          var self = this;\n\n          // this function makes sure that either the\n          // quill event is executed, or the yjs observer is executed\n          var token = true;\n          function mutualExcluse(f) {\n            if (token) {\n              token = false;\n              try {\n                f();\n              } catch (e) {\n                token = true;\n                throw new Error(e);\n              }\n              token = true;\n            }\n          }\n\n          quill.setContents(this.toOTOps());\n\n          quill.on('text-change', function (delta) {\n            mutualExcluse(function () {\n              var pos = 0;\n              var name; // helper variable\n              for (var i = 0; i < delta.ops.length; i++) {\n                var op = delta.ops[i];\n                if (op.insert != null) {\n                  var attrs = self.insert(pos, op.insert);\n                  // create new selection\n                  for (name in op.attributes) {\n                    if (op.attributes[name] !== attrs[name]) {\n                      self.select(pos, pos + op.insert.length, name, op.attributes[name]);\n                    }\n                  }\n                  // not-existence of an attribute in op.attributes denotes\n                  // that we have to unselect (set to null)\n                  for (name in attrs) {\n                    if (op.attributes == null || attrs[name] !== op.attributes[name]) {\n                      self.select(pos, pos + op.insert.length, name, null);\n                    }\n                  }\n                  pos += op.insert.length;\n                }\n                if (op.delete != null) {\n                  self.delete(pos, op.delete);\n                }\n                if (op.retain != null) {\n                  var afterRetain = pos + op.retain;\n                  if (afterRetain > self.length) {\n                    var additionalContent = quill.getText(self.length);\n                    quill.insertText(self.length, additionalContent);\n                    // quill.deleteText(self.length + additionalContent.length, quill.getLength())\n                    for (name in op.attributes) {\n                      quill.formatText(self.length + additionalContent.length, self.length + additionalContent.length * 2, name, null);\n                      // quill.deleteText(self.length, self.length + op.retain)\n                    }\n                    self.insert(self.length, additionalContent);\n                    // op.attributes = null\n                  }\n                  for (name in op.attributes) {\n                    self.select(pos, pos + op.retain, name, op.attributes[name]);\n                    quill.formatText(pos, pos + op.retain, name, op.attributes[name]);\n                  }\n                  pos = afterRetain;\n                }\n              }\n            });\n          });\n          this.observe(function (events) {\n            mutualExcluse(function () {\n              var v; // helper variable\n              var curSel; // helper variable (current selection)\n              for (var i = 0; i < events.length; i++) {\n                var event = events[i];\n                if (event.type === 'insert') {\n                  if (typeof event.value === 'string') {\n                    var position = 0;\n                    var insertSel = {};\n                    for (var l = event.index - 1; l >= 0; l--) {\n                      v = self.valArray[l];\n                      if (typeof v === 'string') {\n                        position++;\n                      } else if (v.constructor === Array && typeof insertSel[v[0]] === 'undefined') {\n                        insertSel[v[0]] = v[1];\n                      }\n                    }\n                    quill.insertText(position, event.value, insertSel);\n                  } else if (event.value.constructor === Array) {\n                    // a new selection is created\n                    // find left selection that matches newSel[0]\n                    curSel = null;\n                    var newSel = event.value;\n                    // denotes the start position of the selection\n                    // (without the selection objects)\n                    var selectionStart = 0;\n                    for (var j = event.index - 1; j >= 0; j--) {\n                      v = self.valArray[j];\n                      if (v.constructor === Array) {\n                        // check if v matches newSel\n                        if (newSel[0] === v[0]) {\n                          // found a selection\n                          // update curSel and go to next step\n                          curSel = v[1];\n                          break;\n                        }\n                      } else if (typeof v === 'string') {\n                        selectionStart++;\n                      }\n                    }\n                    // make sure to decrement j, so we correctly compute selectionStart\n                    for (; j >= 0; j--) {\n                      v = self.valArray[j];\n                      if (typeof v === 'string') {\n                        selectionStart++;\n                      }\n                    }\n                    // either a selection was found {then curSel was updated}, or not (then curSel = null)\n                    if (newSel[1] === curSel) {\n                      // both are the same. not necessary to do anything\n                      return;\n                    }\n                    // now find out the range over which newSel has to be created\n                    var selectionEnd = selectionStart;\n                    for (var k = event.index + 1; k < self.valArray.length; k++) {\n                      v = self.valArray[k];\n                      if (v.constructor === Array) {\n                        if (v[0] === newSel[0]) {\n                          // found another selection with same attr name\n                          break;\n                        }\n                      } else if (typeof v === 'string') {\n                        selectionEnd++;\n                      }\n                    }\n                    // create a selection from selectionStart to selectionEnd\n                    if (selectionStart !== selectionEnd) {\n                      quill.formatText(selectionStart, selectionEnd, newSel[0], newSel[1]);\n                    }\n                  }\n                } else if (event.type === 'delete') {\n                  if (typeof event.value === 'string') {\n                    // TODO: see button. add  || `event.length > 1`\n                    // only if these conditions are true, we have to actually check if we have to delete sth.\n                    // Then we have to check if between pos and pos + event.length are selections:\n                    // delete till pos + (event.length - number of selections)\n                    var pos = 0;\n                    for (var u = 0; u < event.index; u++) {\n                      v = self.valArray[u];\n                      if (typeof v === 'string') {\n                        pos++;\n                      }\n                    }\n                    var delLength = event.length;\n                    /* TODO!!\n                    they do not exist anymore.. so i can't query. you have to query over event.value(s) - but that not yet implemented\n                    for (; i < event.index + event.length; i++) {\n                      if (self.valArray[i].constructor === Array) {\n                        delLength--\n                      }\n                    }*/\n                    quill.deleteText(pos, pos + delLength);\n                  } else if (event.value.constructor === Array) {\n                    curSel = null;\n                    var from = 0;\n                    var x;\n                    for (x = event.index - 1; x >= 0; x--) {\n                      v = self.valArray[x];\n                      if (v.constructor === Array) {\n                        if (v[0] === event.value[0]) {\n                          curSel = v[1];\n                          break;\n                        }\n                      } else if (typeof v === 'string') {\n                        from++;\n                      }\n                    }\n                    for (; x >= 0; v = self.valArray[--x]) {\n                      if (typeof v === 'string') {\n                        from++;\n                      }\n                    }\n                    var to = from;\n                    for (x = event.index; x < self.valArray.length; x++) {\n                      v = self.valArray[x];\n                      if (v.constructor === Array) {\n                        if (v[0] === event.value[0]) {\n                          break;\n                        }\n                      } else if (typeof v === 'string') {\n                        to++;\n                      }\n                    }\n                    if (curSel !== event.value[1] && from !== to) {\n                      quill.formatText(from, to, event.value[0], curSel);\n                    }\n                  }\n                }\n              }\n              quill.editor.checkUpdate();\n            });\n          });\n        }\n      }, {\n        key: '_changed',\n        value: regeneratorRuntime.mark(function _changed() {\n          var _args = arguments;\n          return regeneratorRuntime.wrap(function _changed$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  this.instances.forEach(function (quill) {\n                    quill.editor.checkUpdate();\n                  });\n                  return _context.delegateYield(Y.Array.class.prototype._changed.apply(this, _args), 't0', 2);\n\n                case 2:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _changed, this);\n        })\n      }, {\n        key: 'length',\n        get: function get() {\n          /*\n            TODO: I must not use observe to compute the length.\n            But since I inherit from Y.Array, I can't set observe\n            the changes at the right momet (for that I would require direct access to EventHandler).\n            This is the most elegant solution, for now.\n            But at some time you should re-write Y.Richtext more elegantly!!\n          */\n          return this.toString().length;\n        }\n      }]);\n\n      return YRichtext;\n    }(Y.Array['class']);\n\n    Y.extend('Richtext', new Y.utils.CustomType({\n      name: 'Richtext',\n      class: YRichtext,\n      struct: 'List',\n      initType: regeneratorRuntime.mark(function YTextInitializer(os, model) {\n        var valArray, idArray;\n        return regeneratorRuntime.wrap(function YTextInitializer$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                valArray = [];\n                return _context2.delegateYield(Y.Struct.List.map.call(this, model, function (c) {\n                  valArray.push(c.content);\n                  return JSON.stringify(c.id);\n                }), 't0', 2);\n\n              case 2:\n                idArray = _context2.t0;\n                return _context2.abrupt('return', new YRichtext(os, model.id, idArray, valArray));\n\n              case 4:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, YTextInitializer, this);\n      })\n    }));\n  });\n}\n\nmodule.exports = extend;\nif (typeof Y !== 'undefined') {\n  extend(Y);\n}\n\n},{}]},{},[1])\n\n"],"sourceRoot":"/source/"}