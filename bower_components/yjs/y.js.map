{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/process/browser.js","y.js","node_modules/regenerator-runtime/runtime.js","node_modules/regenerator/runtime.js","src/Connector.js","src/Connectors/Test.js","src/Database.js","src/Struct.js","src/Transaction.js","src/Utils.js","src/y.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","runTimeout","fun","cachedSetTimeout","setTimeout","this","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","2","global","_typeof","Symbol","iterator","obj","constructor","wrap","innerFn","outerFn","self","tryLocsList","generator","Object","create","Generator","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","arg","type","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AwaitArgument","AsyncIterator","invoke","resolve","reject","record","result","value","Promise","then","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","domain","bind","state","GenStateSuspendedStart","GenStateExecuting","GenStateCompleted","doneResult","delegate","undefined","returnMethod","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","hasOwn","hasOwnProperty","$Symbol","toStringTagSymbol","toStringTag","inModule","runtime","regeneratorRuntime","Gp","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","_process","3","console","warn","regenerator-runtime/runtime","4","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","Y","AbstractConnector","y","opts","role","db","forwardAppliedOperations","connections","isSynced","userEventListeners","whenSyncedListeners","currentSyncTarget","syncingClients","forwardToSyncingClients","debug","broadcastedHB","syncStep2","broadcastOpBuffer","protocolVersion","stopGarbageCollector","findNextSyncTarget","userId","setUserId","user","filter","cli","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","action","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","syncUser","uid","conn","requestTransaction","_callee","stateSet","deleteSet","_context","getStateSet","t0","getDeleteSet","t1","send","_callee2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context2","garbageCollectAfterSync","message","log","ops","broadcastOperations","broadcast","map","op","Struct","struct","encode","transactionInProgress","whenTransactionsFinished","sender","_this","JSON","parse","stringify","error","m","_callee3","currentStateSet","ds","_context3","applyDeleteSet","t2","getOperations","t3","os","_setSyncedWith","broadcastHB","defer","promise","_callee5","_context5","store","_callee4","_context4","broadcastOps","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","client","delops","parseArray","node","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","children","getAttribute","parseObject","json","attrName","attrs","int","parseInt","msg","encodeObject","c","encodeArray","setAttribute","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","xmlns","5","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","_get","get","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","globalRoom","users","buffers","removeUser","userLeft","addUser","connector","uname","userJoined","ps","all","flushOne","bufs","buff","getRandom","_buff","_sender","shift","receiveMessage","flushAll","nextFlush","utils","userIdCounter","Test","_Y$AbstractConnector","options","syncingClientDuration","buffer","isDisconnected","6","AbstractDatabase","garbageCollect","gc1","gc2","isConnected","oid","garbageCollectOperation","gcTimeout","gcInterval","userIdPromise","listenersById","listenersByIdExecuteNow","listenersByIdRequestPending","initializedTypes","waitingTransactions","transactionIsFlushed","YConcurrency_TestingMode","executeOrder","gcTimeouts","repairCheckInterval","opsReceivedTimestamp","Date","startRepairCheck","repairCheckIntervalHandler","setInterval","repair","clearInterval","id","check","command","join","replace","ungc","getOperation","gc","setOperation","addToGarbageCollector","left","deleted","content","getInsertionCleanStart","queueGarbageCollector","compareIds","destroy","stopRepairCheck","_destroy","inProgress","getState","opClock","clock","numberOfIds","required","requiredOps","requires","whenOperationsExist","ids","listener","missing","sid","exeNow","ls","_i","_listener","_o","_context6","tryExecute","getInsertion","t4","defined","overlapSize","opid","isGarbageCollected","_context7","addToDebug","Delete","execute","splice","getLastId","origin","addOperation","operationAdded","t7","tryCombineWithLeft","transaction","opLen","parentIsDeleted","startId","_i2","opIsDeleted","delop","_context8","_changed","updateState","isDeleted","deleteList","copyOperation","t6","transactionsFinished","_context9","flush","makeGen","callImmediately","_this2","transact","getNextRequest","initType","_context10","typeDefinition","typedefinition","structname","getNextOpId","_callee6","_context11","applyCreatedOperations","createType","7","deleteOperation","Insert","right","parentSub","opContent","getDistanceToOrigin","d","matchesId","tryToRemergeLater","distanceToOrigin","start","oOriginDistance","getInsertionCleanEnd","originOf","t5","t8","t10","t11","t12","t13","t15","t16","removeFromGarbageCollector","end","t22","List","ref","pos","res","operation","Map","getType","8","TransactionInterface","delLength","markDeleted","targetId","preventCallType","callType","targetLength","findWithUpperBound","markGarbageCollected","newlen","put","findPrev","findNext","diff","_next","iterate","parentDeleted","deps","dep","neworigin","neworigin_","originsIn","setParent","t9","t14","t17","_id","t19","removeOperation","checkDeleteStoreForState","Math","max","oLength","setState","deletions","dv","del","counter","oLen","_context12","Number","MAX_VALUE","min","_context13","_context15","_context14","_context16","_context17","_context18","_context19","ins","_context20","getInsertionCleanStartEnd","_context21","leftLid","_context22","copyObject","insLid","_context23","comp","_context24","find","split","_context25","val","_context26","ss","_context27","getStateVector","stateVector","_context29","_context28","_context31","_context30","startSS","endSV","endState","startPos","firstMissing","_context33","missing_origins","newright","_context32","_context34","Transaction","9","smaller","b","inDeletionRange","id1","id2","createEmptyOpsArray","createSmallLookupBuffer","Store","SmallLookupBuffer","_Store","arg1","arg2","writeBuffer","readBuffer","noSuperCall","write","_delete","findWithLowerBound","_args5","_args6","_args7","_args8","_args9","EventListenerHandler","eventListeners","g","event","EventHandler","_EventListenerHandler","onevent","waiting","awaiting","checkDelete","w","iLength","dStart","dEnd","iStart","iEnd","newI","awaitOps","notSoSmartSort","before","dels","independent","j","_pullChanges","_tryCallEvents","newLeft","CustomType","CustomTypeDefinition","def","appendAdditionalInfo","parseArguments","isTypeDefinition","v","10","requestModules","modules","sourceDir","extention","promises","modulename","toLowerCase","requiringModules","imported","document","createElement","src","head","appendChild","requireModule","types","share","yconfig","YConfig","whenUserIdSet","init","extend","callback","propertyname","typeConstructor","typeName","typedef","disconnect","reconnect","./Connector.js","./Connectors/Test.js","./Database.js","./Struct.js","./Transaction.js","./Utils.js"],"mappings":"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","file":"y.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n    try {\n        cachedSetTimeout = setTimeout;\n    } catch (e) {\n        cachedSetTimeout = function () {\n            throw new Error('setTimeout is not defined');\n        }\n    }\n    try {\n        cachedClearTimeout = clearTimeout;\n    } catch (e) {\n        cachedClearTimeout = function () {\n            throw new Error('clearTimeout is not defined');\n        }\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,"/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value instanceof AwaitArgument) {\n          return Promise.resolve(value.arg).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = arg;\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","console.warn(\n  \"The regenerator/runtime module is deprecated; \" +\n    \"please import regenerator-runtime/runtime instead.\"\n);\n\nmodule.exports = require(\"regenerator-runtime/runtime\");\n","/* @flow */\n'use strict'\n\nmodule.exports = function (Y/* :any */) {\n  class AbstractConnector {\n    /* ::\n    y: YConfig;\n    role: SyncRole;\n    connections: Object;\n    isSynced: boolean;\n    userEventListeners: Array<Function>;\n    whenSyncedListeners: Array<Function>;\n    currentSyncTarget: ?UserId;\n    syncingClients: Array<UserId>;\n    forwardToSyncingClients: boolean;\n    debug: boolean;\n    broadcastedHB: boolean;\n    syncStep2: Promise;\n    userId: UserId;\n    send: Function;\n    broadcast: Function;\n    broadcastOpBuffer: Array<Operation>;\n    protocolVersion: number;\n    */\n    /*\n      opts contains the following information:\n       role : String Role of this client (\"master\" or \"slave\")\n       userId : String Uniquely defines the user.\n       debug: Boolean Whether to print debug messages (optional)\n    */\n    constructor (y, opts) {\n      this.y = y\n      if (opts == null) {\n        opts = {}\n      }\n      if (opts.role == null || opts.role === 'master') {\n        this.role = 'master'\n      } else if (opts.role === 'slave') {\n        this.role = 'slave'\n      } else {\n        throw new Error(\"Role must be either 'master' or 'slave'!\")\n      }\n      this.y.db.forwardAppliedOperations = opts.forwardAppliedOperations || false\n      this.role = opts.role\n      this.connections = {}\n      this.isSynced = false\n      this.userEventListeners = []\n      this.whenSyncedListeners = []\n      this.currentSyncTarget = null\n      this.syncingClients = []\n      this.forwardToSyncingClients = opts.forwardToSyncingClients !== false\n      this.debug = opts.debug === true\n      this.broadcastedHB = false\n      this.syncStep2 = Promise.resolve()\n      this.broadcastOpBuffer = []\n      this.protocolVersion = 11\n    }\n    reconnect () {\n    }\n    disconnect () {\n      this.connections = {}\n      this.isSynced = false\n      this.currentSyncTarget = null\n      this.broadcastedHB = false\n      this.syncingClients = []\n      this.whenSyncedListeners = []\n      return this.y.db.stopGarbageCollector()\n    }\n    repair () {\n      console.info('Repairing the state of Yjs. This can happen if messages get lost, and Yjs detects that something is wrong. If this happens often, please report an issue here: https://github.com/y-js/yjs/issues')\n      for (var name in this.connections) {\n        this.connections[name].isSynced = false\n      }\n      this.isSynced = false\n      this.currentSyncTarget = null\n      this.broadcastedHB = false\n      this.findNextSyncTarget()\n    }\n    setUserId (userId) {\n      if (this.userId == null) {\n        this.userId = userId\n        return this.y.db.setUserId(userId)\n      } else {\n        return null\n      }\n    }\n    onUserEvent (f) {\n      this.userEventListeners.push(f)\n    }\n    userLeft (user) {\n      if (this.connections[user] != null) {\n        delete this.connections[user]\n        if (user === this.currentSyncTarget) {\n          this.currentSyncTarget = null\n          this.findNextSyncTarget()\n        }\n        this.syncingClients = this.syncingClients.filter(function (cli) {\n          return cli !== user\n        })\n        for (var f of this.userEventListeners) {\n          f({\n            action: 'userLeft',\n            user: user\n          })\n        }\n      }\n    }\n    userJoined (user, role) {\n      if (role == null) {\n        throw new Error('You must specify the role of the joined user!')\n      }\n      if (this.connections[user] != null) {\n        throw new Error('This user already joined!')\n      }\n      this.connections[user] = {\n        isSynced: false,\n        role: role\n      }\n      for (var f of this.userEventListeners) {\n        f({\n          action: 'userJoined',\n          user: user,\n          role: role\n        })\n      }\n      if (this.currentSyncTarget == null) {\n        this.findNextSyncTarget()\n      }\n    }\n    // Execute a function _when_ we are connected.\n    // If not connected, wait until connected\n    whenSynced (f) {\n      if (this.isSynced) {\n        f()\n      } else {\n        this.whenSyncedListeners.push(f)\n      }\n    }\n    /*\n\n     returns false, if there is no sync target\n     true otherwise\n    */\n    findNextSyncTarget () {\n      if (this.currentSyncTarget != null || this.isSynced) {\n        return // \"The current sync has not finished!\"\n      }\n\n      var syncUser = null\n      for (var uid in this.connections) {\n        if (!this.connections[uid].isSynced) {\n          syncUser = uid\n          break\n        }\n      }\n      var conn = this\n      if (syncUser != null) {\n        this.currentSyncTarget = syncUser\n        this.y.db.requestTransaction(function *() {\n          var stateSet = yield* this.getStateSet()\n          var deleteSet = yield* this.getDeleteSet()\n          conn.send(syncUser, {\n            type: 'sync step 1',\n            stateSet: stateSet,\n            deleteSet: deleteSet,\n            protocolVersion: conn.protocolVersion\n          })\n        })\n      } else {\n        this.y.db.requestTransaction(function *() {\n          // it is crucial that isSynced is set at the time garbageCollectAfterSync is called\n          conn.isSynced = true\n          yield* this.garbageCollectAfterSync()\n          // call whensynced listeners\n          for (var f of conn.whenSyncedListeners) {\n            f()\n          }\n          conn.whenSyncedListeners = []\n        })\n      }\n    }\n    send (uid, message) {\n      if (this.debug) {\n        console.log(`send ${this.userId} -> ${uid}: ${message.type}`, message) // eslint-disable-line\n      }\n    }\n    /*\n      Buffer operations, and broadcast them when ready.\n    */\n    broadcastOps (ops) {\n      ops = ops.map(function (op) {\n        return Y.Struct[op.struct].encode(op)\n      })\n      var self = this\n      function broadcastOperations () {\n        if (self.broadcastOpBuffer.length > 0) {\n          self.broadcast({\n            type: 'update',\n            ops: self.broadcastOpBuffer\n          })\n          self.broadcastOpBuffer = []\n        }\n      }\n      if (this.broadcastOpBuffer.length === 0) {\n        this.broadcastOpBuffer = ops\n        if (this.y.db.transactionInProgress) {\n          this.y.db.whenTransactionsFinished().then(broadcastOperations)\n        } else {\n          setTimeout(broadcastOperations, 0)\n        }\n      } else {\n        this.broadcastOpBuffer = this.broadcastOpBuffer.concat(ops)\n      }\n    }\n    /*\n      You received a raw message, and you know that it is intended for Yjs. Then call this function.\n    */\n    receiveMessage (sender/* :UserId */, message/* :Message */) {\n      if (sender === this.userId) {\n        return\n      }\n      if (this.debug) {\n        console.log(`receive ${sender} -> ${this.userId}: ${message.type}`, JSON.parse(JSON.stringify(message))) // eslint-disable-line\n      }\n      if (message.protocolVersion != null && message.protocolVersion !== this.protocolVersion) {\n        console.error(\n          `You tried to sync with a yjs instance that has a different protocol version\n          (You: ${this.protocolVersion}, Client: ${message.protocolVersion}).\n          The sync was stopped. You need to upgrade your dependencies (especially Yjs & the Connector)!\n          `)\n        this.send(sender, {\n          type: 'sync stop',\n          protocolVersion: this.protocolVersion\n        })\n        return\n      }\n      if (message.type === 'sync step 1') {\n        let conn = this\n        let m = message\n        this.y.db.requestTransaction(function *() {\n          var currentStateSet = yield* this.getStateSet()\n          yield* this.applyDeleteSet(m.deleteSet)\n\n          var ds = yield* this.getDeleteSet()\n          var ops = yield* this.getOperations(m.stateSet)\n          conn.send(sender, {\n            type: 'sync step 2',\n            os: ops,\n            stateSet: currentStateSet,\n            deleteSet: ds,\n            protocolVersion: this.protocolVersion\n          })\n          if (this.forwardToSyncingClients) {\n            conn.syncingClients.push(sender)\n            setTimeout(function () {\n              conn.syncingClients = conn.syncingClients.filter(function (cli) {\n                return cli !== sender\n              })\n              conn.send(sender, {\n                type: 'sync done'\n              })\n            }, 5000) // TODO: conn.syncingClientDuration)\n          } else {\n            conn.send(sender, {\n              type: 'sync done'\n            })\n          }\n          conn._setSyncedWith(sender)\n        })\n      } else if (message.type === 'sync step 2') {\n        let conn = this\n        var broadcastHB = !this.broadcastedHB\n        this.broadcastedHB = true\n        var db = this.y.db\n        var defer = {}\n        defer.promise = new Promise(function (resolve) {\n          defer.resolve = resolve\n        })\n        this.syncStep2 = defer.promise\n        let m /* :MessageSyncStep2 */ = message\n        db.requestTransaction(function * () {\n          yield* this.applyDeleteSet(m.deleteSet)\n          this.store.apply(m.os)\n          db.requestTransaction(function * () {\n            var ops = yield* this.getOperations(m.stateSet)\n            if (ops.length > 0) {\n              if (!broadcastHB) { // TODO: consider to broadcast here..\n                conn.send(sender, {\n                  type: 'update',\n                  ops: ops\n                })\n              } else {\n                // broadcast only once!\n                conn.broadcastOps(ops)\n              }\n            }\n            defer.resolve()\n          })\n        })\n      } else if (message.type === 'sync done') {\n        var self = this\n        this.syncStep2.then(function () {\n          self._setSyncedWith(sender)\n        })\n      } else if (message.type === 'update') {\n        if (this.forwardToSyncingClients) {\n          for (var client of this.syncingClients) {\n            this.send(client, message)\n          }\n        }\n        if (this.y.db.forwardAppliedOperations) {\n          var delops = message.ops.filter(function (o) {\n            return o.struct === 'Delete'\n          })\n          if (delops.length > 0) {\n            this.broadcastOps(delops)\n          }\n        }\n        this.y.db.apply(message.ops)\n      }\n    }\n    _setSyncedWith (user) {\n      var conn = this.connections[user]\n      if (conn != null) {\n        conn.isSynced = true\n      }\n      if (user === this.currentSyncTarget) {\n        this.currentSyncTarget = null\n        this.findNextSyncTarget()\n      }\n    }\n    /*\n      Currently, the HB encodes operations as JSON. For the moment I want to keep it\n      that way. Maybe we support encoding in the HB as XML in the future, but for now I don't want\n      too much overhead. Y is very likely to get changed a lot in the future\n\n      Because we don't want to encode JSON as string (with character escaping, wich makes it pretty much unreadable)\n      we encode the JSON as XML.\n\n      When the HB support encoding as XML, the format should look pretty much like this.\n\n      does not support primitive values as array elements\n      expects an ltx (less than xml) object\n    */\n    parseMessageFromXml (m/* :any */) {\n      function parseArray (node) {\n        for (var n of node.children) {\n          if (n.getAttribute('isArray') === 'true') {\n            return parseArray(n)\n          } else {\n            return parseObject(n)\n          }\n        }\n      }\n      function parseObject (node/* :any */) {\n        var json = {}\n        for (var attrName in node.attrs) {\n          var value = node.attrs[attrName]\n          var int = parseInt(value, 10)\n          if (isNaN(int) || ('' + int) !== value) {\n            json[attrName] = value\n          } else {\n            json[attrName] = int\n          }\n        }\n        for (var n/* :any */ in node.children) {\n          var name = n.name\n          if (n.getAttribute('isArray') === 'true') {\n            json[name] = parseArray(n)\n          } else {\n            json[name] = parseObject(n)\n          }\n        }\n        return json\n      }\n      parseObject(m)\n    }\n    /*\n      encode message in xml\n      we use string because Strophe only accepts an \"xml-string\"..\n      So {a:4,b:{c:5}} will look like\n      <y a=\"4\">\n        <b c=\"5\"></b>\n      </y>\n      m - ltx element\n      json - Object\n    */\n    encodeMessageToXml (msg, obj) {\n      // attributes is optional\n      function encodeObject (m, json) {\n        for (var name in json) {\n          var value = json[name]\n          if (name == null) {\n            // nop\n          } else if (value.constructor === Object) {\n            encodeObject(m.c(name), value)\n          } else if (value.constructor === Array) {\n            encodeArray(m.c(name), value)\n          } else {\n            m.setAttribute(name, value)\n          }\n        }\n      }\n      function encodeArray (m, array) {\n        m.setAttribute('isArray', 'true')\n        for (var e of array) {\n          if (e.constructor === Object) {\n            encodeObject(m.c('array-element'), e)\n          } else {\n            encodeArray(m.c('array-element'), e)\n          }\n        }\n      }\n      if (obj.constructor === Object) {\n        encodeObject(msg.c('y', { xmlns: 'http://y.ninja/connector-stanza' }), obj)\n      } else if (obj.constructor === Array) {\n        encodeArray(msg.c('y', { xmlns: 'http://y.ninja/connector-stanza' }), obj)\n      } else {\n        throw new Error(\"I can't encode this json!\")\n      }\n    }\n  }\n  Y.AbstractConnector = AbstractConnector\n}\n","/* global getRandom, async */\n'use strict'\n\nmodule.exports = function (Y) {\n  var globalRoom = {\n    users: {},\n    buffers: {},\n    removeUser: function (user) {\n      for (var i in this.users) {\n        this.users[i].userLeft(user)\n      }\n      delete this.users[user]\n      delete this.buffers[user]\n    },\n    addUser: function (connector) {\n      this.users[connector.userId] = connector\n      this.buffers[connector.userId] = {}\n      for (var uname in this.users) {\n        if (uname !== connector.userId) {\n          var u = this.users[uname]\n          u.userJoined(connector.userId, 'master')\n          connector.userJoined(u.userId, 'master')\n        }\n      }\n    },\n    whenTransactionsFinished: function () {\n      var ps = []\n      for (var name in this.users) {\n        ps.push(this.users[name].y.db.whenTransactionsFinished())\n      }\n      return Promise.all(ps)\n    },\n    flushOne: function flushOne () {\n      var bufs = []\n      for (var receiver in globalRoom.buffers) {\n        let buff = globalRoom.buffers[receiver]\n        var push = false\n        for (let sender in buff) {\n          if (buff[sender].length > 0) {\n            push = true\n            break\n          }\n        }\n        if (push) {\n          bufs.push(receiver)\n        }\n      }\n      if (bufs.length > 0) {\n        var userId = getRandom(bufs)\n        let buff = globalRoom.buffers[userId]\n        let sender = getRandom(Object.keys(buff))\n        var m = buff[sender].shift()\n        if (buff[sender].length === 0) {\n          delete buff[sender]\n        }\n        var user = globalRoom.users[userId]\n        user.receiveMessage(m[0], m[1])\n        return user.y.db.whenTransactionsFinished()\n      } else {\n        return false\n      }\n    },\n    flushAll: function () {\n      return new Promise(function (resolve) {\n        // flushes may result in more created operations,\n        // flush until there is nothing more to flush\n        function nextFlush () {\n          var c = globalRoom.flushOne()\n          if (c) {\n            while (c) {\n              c = globalRoom.flushOne()\n            }\n            globalRoom.whenTransactionsFinished().then(nextFlush)\n          } else {\n            setTimeout(function () {\n              var c = globalRoom.flushOne()\n              if (c) {\n                c.then(function () {\n                  globalRoom.whenTransactionsFinished().then(nextFlush)\n                })\n              } else {\n                resolve()\n              }\n            }, 0)\n          }\n        }\n        globalRoom.whenTransactionsFinished().then(nextFlush)\n      })\n    }\n  }\n  Y.utils.globalRoom = globalRoom\n\n  var userIdCounter = 0\n\n  class Test extends Y.AbstractConnector {\n    constructor (y, options) {\n      if (options === undefined) {\n        throw new Error('Options must not be undefined!')\n      }\n      options.role = 'master'\n      options.forwardToSyncingClients = false\n      super(y, options)\n      this.setUserId((userIdCounter++) + '').then(() => {\n        globalRoom.addUser(this)\n      })\n      this.globalRoom = globalRoom\n      this.syncingClientDuration = 0\n    }\n    receiveMessage (sender, m) {\n      super.receiveMessage(sender, JSON.parse(JSON.stringify(m)))\n    }\n    send (userId, message) {\n      var buffer = globalRoom.buffers[userId]\n      if (buffer != null) {\n        if (buffer[this.userId] == null) {\n          buffer[this.userId] = []\n        }\n        buffer[this.userId].push(JSON.parse(JSON.stringify([this.userId, message])))\n      }\n    }\n    broadcast (message) {\n      for (var key in globalRoom.buffers) {\n        var buff = globalRoom.buffers[key]\n        if (buff[this.userId] == null) {\n          buff[this.userId] = []\n        }\n        buff[this.userId].push(JSON.parse(JSON.stringify([this.userId, message])))\n      }\n    }\n    isDisconnected () {\n      return globalRoom.users[this.userId] == null\n    }\n    reconnect () {\n      if (this.isDisconnected()) {\n        globalRoom.addUser(this)\n        super.reconnect()\n      }\n      return Y.utils.globalRoom.flushAll()\n    }\n    disconnect () {\n      if (!this.isDisconnected()) {\n        globalRoom.removeUser(this.userId)\n        super.disconnect()\n      }\n      return this.y.db.whenTransactionsFinished()\n    }\n    flush () {\n      var self = this\n      return async(function * () {\n        var buff = globalRoom.buffers[self.userId]\n        while (Object.keys(buff).length > 0) {\n          var sender = getRandom(Object.keys(buff))\n          var m = buff[sender].shift()\n          if (buff[sender].length === 0) {\n            delete buff[sender]\n          }\n          this.receiveMessage(m[0], m[1])\n        }\n        yield self.whenTransactionsFinished()\n      })\n    }\n  }\n\n  Y.Test = Test\n}\n","/* @flow */\n'use strict'\n\nmodule.exports = function (Y /* :any */) {\n  /*\n    Partial definition of an OperationStore.\n    TODO: name it Database, operation store only holds operations.\n\n    A database definition must alse define the following methods:\n    * logTable() (optional)\n      - show relevant information information in a table\n    * requestTransaction(makeGen)\n      - request a transaction\n    * destroy()\n      - destroy the database\n  */\n  class AbstractDatabase {\n    /* ::\n    y: YConfig;\n    forwardAppliedOperations: boolean;\n    listenersById: Object;\n    listenersByIdExecuteNow: Array<Object>;\n    listenersByIdRequestPending: boolean;\n    initializedTypes: Object;\n    whenUserIdSetListener: ?Function;\n    waitingTransactions: Array<Transaction>;\n    transactionInProgress: boolean;\n    executeOrder: Array<Object>;\n    gc1: Array<Struct>;\n    gc2: Array<Struct>;\n    gcTimeout: number;\n    gcInterval: any;\n    garbageCollect: Function;\n    executeOrder: Array<any>; // for debugging only\n    userId: UserId;\n    opClock: number;\n    transactionsFinished: ?{promise: Promise, resolve: any};\n    transact: (x: ?Generator) => any;\n    */\n    constructor (y, opts) {\n      this.y = y\n      var os = this\n      this.userId = null\n      var resolve\n      this.userIdPromise = new Promise(function (r) {\n        resolve = r\n      })\n      this.userIdPromise.resolve = resolve\n      // whether to broadcast all applied operations (insert & delete hook)\n      this.forwardAppliedOperations = false\n      // E.g. this.listenersById[id] : Array<Listener>\n      this.listenersById = {}\n      // Execute the next time a transaction is requested\n      this.listenersByIdExecuteNow = []\n      // A transaction is requested\n      this.listenersByIdRequestPending = false\n      /* To make things more clear, the following naming conventions:\n         * ls : we put this.listenersById on ls\n         * l : Array<Listener>\n         * id : Id (can't use as property name)\n         * sid : String (converted from id via JSON.stringify\n                         so we can use it as a property name)\n\n        Always remember to first overwrite\n        a property before you iterate over it!\n      */\n      // TODO: Use ES7 Weak Maps. This way types that are no longer user,\n      // wont be kept in memory.\n      this.initializedTypes = {}\n      this.waitingTransactions = []\n      this.transactionInProgress = false\n      this.transactionIsFlushed = false\n      if (typeof YConcurrency_TestingMode !== 'undefined') {\n        this.executeOrder = []\n      }\n      this.gc1 = [] // first stage\n      this.gc2 = [] // second stage -> after that, remove the op\n      this.gcTimeout = !opts.gcTimeout ? 50000 : opts.gcTimeouts\n      function garbageCollect () {\n        return os.whenTransactionsFinished().then(function () {\n          if (os.gc1.length > 0 || os.gc2.length > 0) {\n            if (!os.y.isConnected()) {\n              console.warn('gc should be empty when disconnected!')\n            }\n            return new Promise((resolve) => {\n              os.requestTransaction(function * () {\n                if (os.y.connector != null && os.y.connector.isSynced) {\n                  for (var i = 0; i < os.gc2.length; i++) {\n                    var oid = os.gc2[i]\n                    yield* this.garbageCollectOperation(oid)\n                  }\n                  os.gc2 = os.gc1\n                  os.gc1 = []\n                }\n                // TODO: Use setInterval here instead (when garbageCollect is called several times there will be several timeouts..)\n                if (os.gcTimeout > 0) {\n                  os.gcInterval = setTimeout(garbageCollect, os.gcTimeout)\n                }\n                resolve()\n              })\n            })\n          } else {\n            // TODO: see above\n            if (os.gcTimeout > 0) {\n              os.gcInterval = setTimeout(garbageCollect, os.gcTimeout)\n            }\n            return Promise.resolve()\n          }\n        })\n      }\n      this.garbageCollect = garbageCollect\n      if (this.gcTimeout > 0) {\n        garbageCollect()\n      }\n      this.repairCheckInterval = !opts.repairCheckInterval ? 6000 : opts.repairCheckInterval\n      this.opsReceivedTimestamp = new Date()\n      this.startRepairCheck()\n    }\n    startRepairCheck () {\n      var os = this\n      if (this.repairCheckInterval > 0) {\n        this.repairCheckIntervalHandler = setInterval(function repairOnMissingOperations () {\n          /*\n            Case 1. No ops have been received in a while (new Date() - os.opsReceivedTimestamp > os.repairCheckInterval)\n              - 1.1 os.listenersById is empty. Then the state was correct the whole time. -> Nothing to do (nor to update)\n              - 1.2 os.listenersById is not empty.\n                      * Then the state was incorrect for at least {os.repairCheckInterval} seconds.\n                      * -> Remove everything in os.listenersById and sync again (connector.repair())\n            Case 2. An op has been received in the last {os.repairCheckInterval } seconds.\n                    It is not yet necessary to check for faulty behavior. Everything can still resolve itself. Wait for more messages.\n                    If nothing was received for a while and os.listenersById is still not emty, we are in case 1.2\n                    -> Do nothing\n\n            Baseline here is: we really only have to catch case 1.2..\n          */\n          if (\n            new Date() - os.opsReceivedTimestamp > os.repairCheckInterval &&\n            Object.keys(os.listenersById).length > 0 // os.listenersById is not empty\n          ) {\n            // haven't received operations for over {os.repairCheckInterval} seconds, resend state vector\n            os.listenersById = {}\n            os.opsReceivedTimestamp = new Date() // update so you don't send repair several times in a row\n            os.y.connector.repair()\n          }\n        }, this.repairCheckInterval)\n      }\n    }\n    stopRepairCheck () {\n      clearInterval(this.repairCheckIntervalHandler)\n    }\n    queueGarbageCollector (id) {\n      if (this.y.isConnected()) {\n        this.gc1.push(id)\n      }\n    }\n    emptyGarbageCollector () {\n      return new Promise(resolve => {\n        var check = () => {\n          if (this.gc1.length > 0 || this.gc2.length > 0) {\n            this.garbageCollect().then(check)\n          } else {\n            resolve()\n          }\n        }\n        setTimeout(check, 0)\n      })\n    }\n    addToDebug () {\n      if (typeof YConcurrency_TestingMode !== 'undefined') {\n        var command /* :string */ = Array.prototype.map.call(arguments, function (s) {\n          if (typeof s === 'string') {\n            return s\n          } else {\n            return JSON.stringify(s)\n          }\n        }).join('').replace(/\"/g, \"'\").replace(/,/g, ', ').replace(/:/g, ': ')\n        this.executeOrder.push(command)\n      }\n    }\n    getDebugData () {\n      console.log(this.executeOrder.join('\\n'))\n    }\n    stopGarbageCollector () {\n      var self = this\n      return new Promise(function (resolve) {\n        self.requestTransaction(function * () {\n          var ungc /* :Array<Struct> */ = self.gc1.concat(self.gc2)\n          self.gc1 = []\n          self.gc2 = []\n          for (var i = 0; i < ungc.length; i++) {\n            var op = yield* this.getOperation(ungc[i])\n            if (op != null) {\n              delete op.gc\n              yield* this.setOperation(op)\n            }\n          }\n          resolve()\n        })\n      })\n    }\n    /*\n      Try to add to GC.\n\n      TODO: rename this function\n\n      Rulez:\n      * Only gc if this user is online\n      * The most left element in a list must not be gc'd.\n        => There is at least one element in the list\n\n      returns true iff op was added to GC\n    */\n    * addToGarbageCollector (op, left) {\n      if (\n        op.gc == null &&\n        op.deleted === true\n      ) {\n        var gc = false\n        if (left != null && left.deleted === true) {\n          gc = true\n        } else if (op.content != null && op.content.length > 1) {\n          op = yield* this.getInsertionCleanStart([op.id[0], op.id[1] + 1])\n          gc = true\n        }\n        if (gc) {\n          op.gc = true\n          yield* this.setOperation(op)\n          this.store.queueGarbageCollector(op.id)\n          return true\n        }\n      }\n      return false\n    }\n    removeFromGarbageCollector (op) {\n      function filter (o) {\n        return !Y.utils.compareIds(o, op.id)\n      }\n      this.gc1 = this.gc1.filter(filter)\n      this.gc2 = this.gc2.filter(filter)\n      delete op.gc\n    }\n    * destroy () {\n      clearInterval(this.gcInterval)\n      this.gcInterval = null\n      this.stopRepairCheck()\n      for (var key in this.initializedTypes) {\n        var type = this.initializedTypes[key]\n        if (type._destroy != null) {\n          type._destroy()\n        } else {\n          console.error('The type you included does not provide destroy functionality, it will remain in memory (updating your packages will help).')\n        }\n      }\n    }\n    setUserId (userId) {\n      if (!this.userIdPromise.inProgress) {\n        this.userIdPromise.inProgress = true\n        var self = this\n        self.requestTransaction(function * () {\n          self.userId = userId\n          var state = yield* this.getState(userId)\n          self.opClock = state.clock\n          self.userIdPromise.resolve(userId)\n        })\n      }\n      return this.userIdPromise\n    }\n    whenUserIdSet (f) {\n      this.userIdPromise.then(f)\n    }\n    getNextOpId (numberOfIds) {\n      if (numberOfIds == null) {\n        throw new Error('getNextOpId expects the number of created ids to create!')\n      } else if (this.userId == null) {\n        throw new Error('OperationStore not yet initialized!')\n      } else {\n        var id = [this.userId, this.opClock]\n        this.opClock += numberOfIds\n        return id\n      }\n    }\n    /*\n      Apply a list of operations.\n\n      * we save a timestamp, because we received new operations that could resolve ops in this.listenersById (see this.startRepairCheck)\n      * get a transaction\n      * check whether all Struct.*.requiredOps are in the OS\n      * check if it is an expected op (otherwise wait for it)\n      * check if was deleted, apply a delete operation after op was applied\n    */\n    apply (ops) {\n      this.opsReceivedTimestamp = new Date()\n      for (var i = 0; i < ops.length; i++) {\n        var o = ops[i]\n        if (o.id == null || o.id[0] !== this.y.connector.userId) {\n          var required = Y.Struct[o.struct].requiredOps(o)\n          if (o.requires != null) {\n            required = required.concat(o.requires)\n          }\n          this.whenOperationsExist(required, o)\n        }\n      }\n    }\n    /*\n      op is executed as soon as every operation requested is available.\n      Note that Transaction can (and should) buffer requests.\n    */\n    whenOperationsExist (ids, op) {\n      if (ids.length > 0) {\n        let listener = {\n          op: op,\n          missing: ids.length\n        }\n\n        for (let i = 0; i < ids.length; i++) {\n          let id = ids[i]\n          let sid = JSON.stringify(id)\n          let l = this.listenersById[sid]\n          if (l == null) {\n            l = []\n            this.listenersById[sid] = l\n          }\n          l.push(listener)\n        }\n      } else {\n        this.listenersByIdExecuteNow.push({\n          op: op\n        })\n      }\n\n      if (this.listenersByIdRequestPending) {\n        return\n      }\n\n      this.listenersByIdRequestPending = true\n      var store = this\n\n      this.requestTransaction(function * () {\n        var exeNow = store.listenersByIdExecuteNow\n        store.listenersByIdExecuteNow = []\n\n        var ls = store.listenersById\n        store.listenersById = {}\n\n        store.listenersByIdRequestPending = false\n\n        for (let key = 0; key < exeNow.length; key++) {\n          let o = exeNow[key].op\n          yield* store.tryExecute.call(this, o)\n        }\n\n        for (var sid in ls) {\n          var l = ls[sid]\n          var id = JSON.parse(sid)\n          var op\n          if (typeof id[1] === 'string') {\n            op = yield* this.getOperation(id)\n          } else {\n            op = yield* this.getInsertion(id)\n          }\n          if (op == null) {\n            store.listenersById[sid] = l\n          } else {\n            for (let i = 0; i < l.length; i++) {\n              let listener = l[i]\n              let o = listener.op\n              if (--listener.missing === 0) {\n                yield* store.tryExecute.call(this, o)\n              }\n            }\n          }\n        }\n      })\n    }\n    /*\n      Actually execute an operation, when all expected operations are available.\n    */\n    /* :: // TODO: this belongs somehow to transaction\n    store: Object;\n    getOperation: any;\n    isGarbageCollected: any;\n    addOperation: any;\n    whenOperationsExist: any;\n    */\n    * tryExecute (op) {\n      this.store.addToDebug('yield* this.store.tryExecute.call(this, ', JSON.stringify(op), ')')\n      if (op.struct === 'Delete') {\n        yield* Y.Struct.Delete.execute.call(this, op)\n        // this is now called in Transaction.deleteOperation!\n        // yield* this.store.operationAdded(this, op)\n      } else {\n        // check if this op was defined\n        var defined = yield* this.getInsertion(op.id)\n        while (defined != null && defined.content != null) {\n          // check if this op has a longer content in the case it is defined\n          if (defined.id[1] + defined.content.length < op.id[1] + op.content.length) {\n            var overlapSize = defined.content.length - (op.id[1] - defined.id[1])\n            op.content.splice(0, overlapSize)\n            op.id = [op.id[0], op.id[1] + overlapSize]\n            op.left = Y.utils.getLastId(defined)\n            op.origin = op.left\n            defined = yield* this.getOperation(op.id) // getOperation suffices here\n          } else {\n            break\n          }\n        }\n        if (defined == null) {\n          var opid = op.id\n          var isGarbageCollected = yield* this.isGarbageCollected(opid)\n          if (!isGarbageCollected) {\n            // TODO: reduce number of get / put calls for op ..\n            yield* Y.Struct[op.struct].execute.call(this, op)\n            yield* this.addOperation(op)\n            yield* this.store.operationAdded(this, op)\n            // operationAdded can change op..\n            op = yield* this.getOperation(opid)\n            // if insertion, try to combine with left\n            yield* this.tryCombineWithLeft(op)\n          }\n        }\n      }\n    }\n    /*\n     * Called by a transaction when an operation is added.\n     * This function is especially important for y-indexeddb, where several instances may share a single database.\n     * Every time an operation is created by one instance, it is send to all other instances and operationAdded is called\n     *\n     * If it's not a Delete operation:\n     *   * Checks if another operation is executable (listenersById)\n     *   * Update state, if possible\n     *\n     * Always:\n     *   * Call type\n     */\n    * operationAdded (transaction, op) {\n      if (op.struct === 'Delete') {\n        var target = yield* transaction.getInsertion(op.target)\n        var type = this.initializedTypes[JSON.stringify(target.parent)]\n        if (type != null) {\n          yield* type._changed(transaction, op)\n        }\n      } else {\n        // increase SS\n        yield* transaction.updateState(op.id[0])\n        var opLen = op.content != null ? op.content.length : 1\n        for (let i = 0; i < opLen; i++) {\n          // notify whenOperation listeners (by id)\n          var sid = JSON.stringify([op.id[0], op.id[1] + i])\n          var l = this.listenersById[sid]\n          delete this.listenersById[sid]\n          if (l != null) {\n            for (var key in l) {\n              var listener = l[key]\n              if (--listener.missing === 0) {\n                this.whenOperationsExist([], listener.op)\n              }\n            }\n          }\n        }\n        var t = this.initializedTypes[JSON.stringify(op.parent)]\n\n        // if parent is deleted, mark as gc'd and return\n        if (op.parent != null) {\n          var parentIsDeleted = yield* transaction.isDeleted(op.parent)\n          if (parentIsDeleted) {\n            yield* transaction.deleteList(op.id)\n            return\n          }\n        }\n\n        // notify parent, if it was instanciated as a custom type\n        if (t != null) {\n          let o = Y.utils.copyOperation(op)\n          yield* t._changed(transaction, o)\n        }\n        if (!op.deleted) {\n          // Delete if DS says this is actually deleted\n          var len = op.content != null ? op.content.length : 1\n          var startId = op.id // You must not use op.id in the following loop, because op will change when deleted\n            // TODO: !! console.log('TODO: change this before commiting')\n          for (let i = 0; i < len; i++) {\n            var id = [startId[0], startId[1] + i]\n            var opIsDeleted = yield* transaction.isDeleted(id)\n            if (opIsDeleted) {\n              var delop = {\n                struct: 'Delete',\n                target: id\n              }\n              yield* this.tryExecute.call(transaction, delop)\n            }\n          }\n        }\n      }\n    }\n    whenTransactionsFinished () {\n      if (this.transactionInProgress) {\n        if (this.transactionsFinished == null) {\n          var resolve\n          var promise = new Promise(function (r) {\n            resolve = r\n          })\n          this.transactionsFinished = {\n            resolve: resolve,\n            promise: promise\n          }\n          return promise\n        } else {\n          return this.transactionsFinished.promise\n        }\n      } else {\n        return Promise.resolve()\n      }\n    }\n    // Check if there is another transaction request.\n    // * the last transaction is always a flush :)\n    getNextRequest () {\n      if (this.waitingTransactions.length === 0) {\n        if (this.transactionIsFlushed) {\n          this.transactionInProgress = false\n          this.transactionIsFlushed = false\n          if (this.transactionsFinished != null) {\n            this.transactionsFinished.resolve()\n            this.transactionsFinished = null\n          }\n          return null\n        } else {\n          this.transactionIsFlushed = true\n          return function * () {\n            yield* this.flush()\n          }\n        }\n      } else {\n        this.transactionIsFlushed = false\n        return this.waitingTransactions.shift()\n      }\n    }\n    requestTransaction (makeGen/* :any */, callImmediately) {\n      this.waitingTransactions.push(makeGen)\n      if (!this.transactionInProgress) {\n        this.transactionInProgress = true\n        setTimeout(() => {\n          this.transact(this.getNextRequest())\n        }, 0)\n      }\n    }\n    /*\n      Get a created/initialized type.\n    */\n    getType (id) {\n      return this.initializedTypes[JSON.stringify(id)]\n    }\n    /*\n      Init type. This is called when a remote operation is retrieved, and transformed to a type\n      TODO: delete type from store.initializedTypes[id] when corresponding id was deleted!\n    */\n    * initType (id, args) {\n      var sid = JSON.stringify(id)\n      var t = this.store.initializedTypes[sid]\n      if (t == null) {\n        var op/* :MapStruct | ListStruct */ = yield* this.getOperation(id)\n        if (op != null) {\n          t = yield* Y[op.type].typeDefinition.initType.call(this, this.store, op, args)\n          this.store.initializedTypes[sid] = t\n        }\n      }\n      return t\n    }\n    /*\n     Create type. This is called when the local user creates a type (which is a synchronous action)\n    */\n    createType (typedefinition, id) {\n      var structname = typedefinition[0].struct\n      id = id || this.getNextOpId(1)\n      var op = Y.Struct[structname].create(id)\n      op.type = typedefinition[0].name\n\n      this.requestTransaction(function * () {\n        if (op.id[0] === '_') {\n          yield* this.setOperation(op)\n        } else {\n          yield* this.applyCreatedOperations([op])\n        }\n      })\n      var t = Y[op.type].typeDefinition.createType(this, op, typedefinition[1])\n      this.initializedTypes[JSON.stringify(op.id)] = t\n      return t\n    }\n  }\n  Y.AbstractDatabase = AbstractDatabase\n}\n","/* @flow */\n'use strict'\n\n/*\n An operation also defines the structure of a type. This is why operation and\n structure are used interchangeably here.\n\n It must be of the type Object. I hope to achieve some performance\n improvements when working on databases that support the json format.\n\n An operation must have the following properties:\n\n * encode\n     - Encode the structure in a readable format (preferably string- todo)\n * decode (todo)\n     - decode structure to json\n * execute\n     - Execute the semantics of an operation.\n * requiredOps\n     - Operations that are required to execute this operation.\n*/\nmodule.exports = function (Y/* :any */) {\n  var Struct = {\n    /* This is the only operation that is actually not a structure, because\n    it is not stored in the OS. This is why it _does not_ have an id\n\n    op = {\n      target: Id\n    }\n    */\n    Delete: {\n      encode: function (op) {\n        return op\n      },\n      requiredOps: function (op) {\n        return [] // [op.target]\n      },\n      execute: function * (op) {\n        return yield* this.deleteOperation(op.target, op.length || 1)\n      }\n    },\n    Insert: {\n      /* {\n          content: [any],\n          opContent: Id,\n          id: Id,\n          left: Id,\n          origin: Id,\n          right: Id,\n          parent: Id,\n          parentSub: string (optional), // child of Map type\n        }\n      */\n      encode: function (op/* :Insertion */) /* :Insertion */ {\n        // TODO: you could not send the \"left\" property, then you also have to\n        // \"op.left = null\" in $execute or $decode\n        var e/* :any */ = {\n          id: op.id,\n          left: op.left,\n          right: op.right,\n          origin: op.origin,\n          parent: op.parent,\n          struct: op.struct\n        }\n        if (op.parentSub != null) {\n          e.parentSub = op.parentSub\n        }\n        if (op.hasOwnProperty('opContent')) {\n          e.opContent = op.opContent\n        } else {\n          e.content = op.content.slice()\n        }\n\n        return e\n      },\n      requiredOps: function (op) {\n        var ids = []\n        if (op.left != null) {\n          ids.push(op.left)\n        }\n        if (op.right != null) {\n          ids.push(op.right)\n        }\n        if (op.origin != null && !Y.utils.compareIds(op.left, op.origin)) {\n          ids.push(op.origin)\n        }\n        // if (op.right == null && op.left == null) {\n        ids.push(op.parent)\n\n        if (op.opContent != null) {\n          ids.push(op.opContent)\n        }\n        return ids\n      },\n      getDistanceToOrigin: function * (op) {\n        if (op.left == null) {\n          return 0\n        } else {\n          var d = 0\n          var o = yield* this.getInsertion(op.left)\n          while (!Y.utils.matchesId(o, op.origin)) {\n            d++\n            if (o.left == null) {\n              break\n            } else {\n              o = yield* this.getInsertion(o.left)\n            }\n          }\n          return d\n        }\n      },\n      /*\n      # $this has to find a unique position between origin and the next known character\n      # case 1: $origin equals $o.origin: the $creator parameter decides if left or right\n      #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4\n      #         o2,o3 and o4 origin is 1 (the position of o2)\n      #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator\n      #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex\n      #         therefore $this would be always to the right of o3\n      # case 2: $origin < $o.origin\n      #         if current $this insert_position > $o origin: $this ins\n      #         else $insert_position will not change\n      #         (maybe we encounter case 1 later, then this will be to the right of $o)\n      # case 3: $origin > $o.origin\n      #         $this insert_position is to the left of $o (forever!)\n      */\n      execute: function * (op) {\n        var i // loop counter\n\n        // during this function some ops may get split into two pieces (e.g. with getInsertionCleanEnd)\n        // We try to merge them later, if possible\n        var tryToRemergeLater = []\n\n        if (op.origin != null) { // TODO: !== instead of !=\n          // we save in origin that op originates in it\n          // we need that later when we eventually garbage collect origin (see transaction)\n          var origin = yield* this.getInsertionCleanEnd(op.origin)\n          if (origin.originOf == null) {\n            origin.originOf = []\n          }\n          origin.originOf.push(op.id)\n          yield* this.setOperation(origin)\n          if (origin.right != null) {\n            tryToRemergeLater.push(origin.right)\n          }\n        }\n        var distanceToOrigin = i = yield* Struct.Insert.getDistanceToOrigin.call(this, op) // most cases: 0 (starts from 0)\n\n        // now we begin to insert op in the list of insertions..\n        var o\n        var parent\n        var start\n\n        // find o. o is the first conflicting operation\n        if (op.left != null) {\n          o = yield* this.getInsertionCleanEnd(op.left)\n          if (!Y.utils.compareIds(op.left, op.origin) && o.right != null) {\n            // only if not added previously\n            tryToRemergeLater.push(o.right)\n          }\n          o = (o.right == null) ? null : yield* this.getOperation(o.right)\n        } else { // left == null\n          parent = yield* this.getOperation(op.parent)\n          let startId = op.parentSub ? parent.map[op.parentSub] : parent.start\n          start = startId == null ? null : yield* this.getOperation(startId)\n          o = start\n        }\n\n        // make sure to split op.right if necessary (also add to tryCombineWithLeft)\n        if (op.right != null) {\n          tryToRemergeLater.push(op.right)\n          yield* this.getInsertionCleanStart(op.right)\n        }\n\n        // handle conflicts\n        while (true) {\n          if (o != null && !Y.utils.compareIds(o.id, op.right)) {\n            var oOriginDistance = yield* Struct.Insert.getDistanceToOrigin.call(this, o)\n            if (oOriginDistance === i) {\n              // case 1\n              if (o.id[0] < op.id[0]) {\n                op.left = Y.utils.getLastId(o)\n                distanceToOrigin = i + 1 // just ignore o.content.length, doesn't make a difference\n              }\n            } else if (oOriginDistance < i) {\n              // case 2\n              if (i - distanceToOrigin <= oOriginDistance) {\n                op.left = Y.utils.getLastId(o)\n                distanceToOrigin = i + 1 // just ignore o.content.length, doesn't make a difference\n              }\n            } else {\n              break\n            }\n            i++\n            if (o.right != null) {\n              o = yield* this.getInsertion(o.right)\n            } else {\n              o = null\n            }\n          } else {\n            break\n          }\n        }\n\n        // reconnect..\n        var left = null\n        var right = null\n        if (parent == null) {\n          parent = yield* this.getOperation(op.parent)\n        }\n\n        // reconnect left and set right of op\n        if (op.left != null) {\n          left = yield* this.getInsertion(op.left)\n          // link left\n          op.right = left.right\n          left.right = op.id\n\n          yield* this.setOperation(left)\n        } else {\n          // set op.right from parent, if necessary\n          op.right = op.parentSub ? parent.map[op.parentSub] || null : parent.start\n        }\n        // reconnect right\n        if (op.right != null) {\n          // TODO: wanna connect right too?\n          right = yield* this.getOperation(op.right)\n          right.left = Y.utils.getLastId(op)\n\n          // if right exists, and it is supposed to be gc'd. Remove it from the gc\n          if (right.gc != null) {\n            if (right.content != null && right.content.length > 1) {\n              right = yield* this.getInsertionCleanEnd(right.id)\n            }\n            this.store.removeFromGarbageCollector(right)\n          }\n          yield* this.setOperation(right)\n        }\n\n        // update parents .map/start/end properties\n        if (op.parentSub != null) {\n          if (left == null) {\n            parent.map[op.parentSub] = op.id\n            yield* this.setOperation(parent)\n          }\n          // is a child of a map struct.\n          // Then also make sure that only the most left element is not deleted\n          // We do not call the type in this case (this is what the third parameter is for)\n          if (op.right != null) {\n            yield* this.deleteOperation(op.right, 1, true)\n          }\n          if (op.left != null) {\n            yield* this.deleteOperation(op.id, 1, true)\n          }\n        } else {\n          if (right == null || left == null) {\n            if (right == null) {\n              parent.end = Y.utils.getLastId(op)\n            }\n            if (left == null) {\n              parent.start = op.id\n            }\n            yield* this.setOperation(parent)\n          }\n        }\n\n        // try to merge original op.left and op.origin\n        for (let i = 0; i < tryToRemergeLater.length; i++) {\n          var m = yield* this.getOperation(tryToRemergeLater[i])\n          yield* this.tryCombineWithLeft(m)\n        }\n      }\n    },\n    List: {\n      /*\n      {\n        start: null,\n        end: null,\n        struct: \"List\",\n        type: \"\",\n        id: this.os.getNextOpId(1)\n      }\n      */\n      create: function (id) {\n        return {\n          start: null,\n          end: null,\n          struct: 'List',\n          id: id\n        }\n      },\n      encode: function (op) {\n        var e = {\n          struct: 'List',\n          id: op.id,\n          type: op.type\n        }\n        if (op.requires != null) {\n          e.requires = op.requires\n        }\n        if (op.info != null) {\n          e.info = op.info\n        }\n        return e\n      },\n      requiredOps: function () {\n        /*\n        var ids = []\n        if (op.start != null) {\n          ids.push(op.start)\n        }\n        if (op.end != null){\n          ids.push(op.end)\n        }\n        return ids\n        */\n        return []\n      },\n      execute: function * (op) {\n        op.start = null\n        op.end = null\n      },\n      ref: function * (op, pos) {\n        if (op.start == null) {\n          return null\n        }\n        var res = null\n        var o = yield* this.getOperation(op.start)\n\n        while (true) {\n          if (!o.deleted) {\n            res = o\n            pos--\n          }\n          if (pos >= 0 && o.right != null) {\n            o = yield* this.getOperation(o.right)\n          } else {\n            break\n          }\n        }\n        return res\n      },\n      map: function * (o, f) {\n        o = o.start\n        var res = []\n        while (o != null) { // TODO: change to != (at least some convention)\n          var operation = yield* this.getOperation(o)\n          if (!operation.deleted) {\n            res.push(f(operation))\n          }\n          o = operation.right\n        }\n        return res\n      }\n    },\n    Map: {\n      /*\n        {\n          map: {},\n          struct: \"Map\",\n          type: \"\",\n          id: this.os.getNextOpId(1)\n        }\n      */\n      create: function (id) {\n        return {\n          id: id,\n          map: {},\n          struct: 'Map'\n        }\n      },\n      encode: function (op) {\n        var e = {\n          struct: 'Map',\n          type: op.type,\n          id: op.id,\n          map: {} // overwrite map!!\n        }\n        if (op.requires != null) {\n          e.requires = op.requires\n        }\n        if (op.info != null) {\n          e.info = op.info\n        }\n        return e\n      },\n      requiredOps: function () {\n        return []\n      },\n      execute: function * () {},\n      /*\n        Get a property by name\n      */\n      get: function * (op, name) {\n        var oid = op.map[name]\n        if (oid != null) {\n          var res = yield* this.getOperation(oid)\n          if (res == null || res.deleted) {\n            return void 0\n          } else if (res.opContent == null) {\n            return res.content[0]\n          } else {\n            return yield* this.getType(res.opContent)\n          }\n        }\n      }\n    }\n  }\n  Y.Struct = Struct\n}\n","/* @flow */\n'use strict'\n\n/*\n  Partial definition of a transaction\n\n  A transaction provides all the the async functionality on a database.\n\n  By convention, a transaction has the following properties:\n  * ss for StateSet\n  * os for OperationStore\n  * ds for DeleteStore\n\n  A transaction must also define the following methods:\n  * checkDeleteStoreForState(state)\n    - When increasing the state of a user, an operation with an higher id\n      may already be garbage collected, and therefore it will never be received.\n      update the state to reflect this knowledge. This won't call a method to save the state!\n  * getDeleteSet(id)\n    - Get the delete set in a readable format:\n      {\n        \"userX\": [\n          [5,1], // starting from position 5, one operations is deleted\n          [9,4]  // starting from position 9, four operations are deleted\n        ],\n        \"userY\": ...\n      }\n  * getOpsFromDeleteSet(ds) -- TODO: just call this.deleteOperation(id) here\n    - get a set of deletions that need to be applied in order to get to\n      achieve the state of the supplied ds\n  * setOperation(op)\n    - write `op` to the database.\n      Note: this is allowed to return an in-memory object.\n      E.g. the Memory adapter returns the object that it has in-memory.\n      Changing values on this object will be stored directly in the database\n      without calling this function. Therefore,\n      setOperation may have no functionality in some adapters. This also has\n      implications on the way we use operations that were served from the database.\n      We try not to call copyObject, if not necessary.\n  * addOperation(op)\n    - add an operation to the database.\n      This may only be called once for every op.id\n      Must return a function that returns the next operation in the database (ordered by id)\n  * getOperation(id)\n  * removeOperation(id)\n    - remove an operation from the database. This is called when an operation\n      is garbage collected.\n  * setState(state)\n    - `state` is of the form\n      {\n        user: \"1\",\n        clock: 4\n      } <- meaning that we have four operations from user \"1\"\n           (with these id's respectively: 0, 1, 2, and 3)\n  * getState(user)\n  * getStateVector()\n    - Get the state of the OS in the form\n    [{\n      user: \"userX\",\n      clock: 11\n    },\n     ..\n    ]\n  * getStateSet()\n    - Get the state of the OS in the form\n    {\n      \"userX\": 11,\n      \"userY\": 22\n    }\n   * getOperations(startSS)\n     - Get the all the operations that are necessary in order to achive the\n       stateSet of this user, starting from a stateSet supplied by another user\n   * makeOperationReady(ss, op)\n     - this is called only by `getOperations(startSS)`. It makes an operation\n       applyable on a given SS.\n*/\nmodule.exports = function (Y/* :any */) {\n  class TransactionInterface {\n    /* ::\n    store: Y.AbstractDatabase;\n    ds: Store;\n    os: Store;\n    ss: Store;\n    */\n    /*\n      Apply operations that this user created (no remote ones!)\n        * does not check for Struct.*.requiredOps()\n        * also broadcasts it through the connector\n    */\n    * applyCreatedOperations (ops) {\n      var send = []\n      for (var i = 0; i < ops.length; i++) {\n        var op = ops[i]\n        yield* this.store.tryExecute.call(this, op)\n        if (op.id == null || typeof op.id[1] !== 'string') {\n          send.push(Y.Struct[op.struct].encode(op))\n        }\n      }\n      if (!this.store.y.connector.isDisconnected() && send.length > 0) { // TODO: && !this.store.forwardAppliedOperations (but then i don't send delete ops)\n        // is connected, and this is not going to be send in addOperation\n        this.store.y.connector.broadcastOps(send)\n      }\n    }\n\n    * deleteList (start) {\n      while (start != null) {\n        start = yield* this.getOperation(start)\n        if (!start.gc) {\n          start.gc = true\n          start.deleted = true\n          yield* this.setOperation(start)\n          var delLength = start.content != null ? start.content.length : 1\n          yield* this.markDeleted(start.id, delLength)\n          if (start.opContent != null) {\n            yield* this.deleteOperation(start.opContent)\n          }\n          this.store.queueGarbageCollector(start.id)\n        }\n        start = start.right\n      }\n    }\n\n    /*\n      Mark an operation as deleted, and add it to the GC, if possible.\n    */\n    * deleteOperation (targetId, length, preventCallType) /* :Generator<any, any, any> */ {\n      if (length == null) {\n        length = 1\n      }\n      yield* this.markDeleted(targetId, length)\n      while (length > 0) {\n        var callType = false\n        var target = yield* this.os.findWithUpperBound([targetId[0], targetId[1] + length - 1])\n        var targetLength = target != null && target.content != null ? target.content.length : 1\n        if (target == null || target.id[0] !== targetId[0] || target.id[1] + targetLength <= targetId[1]) {\n          // does not exist or is not in the range of the deletion\n          target = null\n          length = 0\n        } else {\n          // does exist, check if it is too long\n          if (!target.deleted) {\n            if (target.id[1] < targetId[1]) {\n              // starts to the left of the deletion range\n              target = yield* this.getInsertionCleanStart(targetId)\n              targetLength = target.content.length // must have content property!\n            }\n            if (target.id[1] + targetLength > targetId[1] + length) {\n              // ends to the right of the deletion range\n              target = yield* this.getInsertionCleanEnd([targetId[0], targetId[1] + length - 1])\n              targetLength = target.content.length\n            }\n          }\n          length = target.id[1] - targetId[1]\n        }\n\n        if (target != null) {\n          if (!target.deleted) {\n            callType = true\n            // set deleted & notify type\n            target.deleted = true\n            // delete containing lists\n            if (target.start != null) {\n              // TODO: don't do it like this .. -.-\n              yield* this.deleteList(target.start)\n              // yield* this.deleteList(target.id) -- do not gc itself because this may still get referenced\n            }\n            if (target.map != null) {\n              for (var name in target.map) {\n                yield* this.deleteList(target.map[name])\n              }\n              // TODO: here to..  (see above)\n              // yield* this.deleteList(target.id) -- see above\n            }\n            if (target.opContent != null) {\n              yield* this.deleteOperation(target.opContent)\n              // target.opContent = null\n            }\n            if (target.requires != null) {\n              for (var i = 0; i < target.requires.length; i++) {\n                yield* this.deleteOperation(target.requires[i])\n              }\n            }\n          }\n          var left\n          if (target.left != null) {\n            left = yield* this.getInsertion(target.left)\n          } else {\n            left = null\n          }\n\n          // set here because it was deleted and/or gc'd\n          yield* this.setOperation(target)\n\n          /*\n            Check if it is possible to add right to the gc.\n            Because this delete can't be responsible for left being gc'd,\n            we don't have to add left to the gc..\n          */\n          var right\n          if (target.right != null) {\n            right = yield* this.getOperation(target.right)\n          } else {\n            right = null\n          }\n          if (callType && !preventCallType) {\n            yield* this.store.operationAdded(this, {\n              struct: 'Delete',\n              target: target.id,\n              length: targetLength\n            })\n          }\n          // need to gc in the end!\n          yield* this.store.addToGarbageCollector.call(this, target, left)\n          if (right != null) {\n            yield* this.store.addToGarbageCollector.call(this, right, target)\n          }\n        }\n      }\n    }\n    /*\n      Mark an operation as deleted&gc'd\n    */\n    * markGarbageCollected (id, len) {\n      // this.mem.push([\"gc\", id]);\n      this.store.addToDebug('yield* this.markGarbageCollected(', id, ', ', len, ')')\n      var n = yield* this.markDeleted(id, len)\n      if (n.id[1] < id[1] && !n.gc) {\n        // un-extend left\n        var newlen = n.len - (id[1] - n.id[1])\n        n.len -= newlen\n        yield* this.ds.put(n)\n        n = {id: id, len: newlen, gc: false}\n        yield* this.ds.put(n)\n      }\n      // get prev&next before adding a new operation\n      var prev = yield* this.ds.findPrev(id)\n      var next = yield* this.ds.findNext(id)\n\n      if (id[1] + len < n.id[1] + n.len && !n.gc) {\n        // un-extend right\n        yield* this.ds.put({id: [id[0], id[1] + len], len: n.len - len, gc: false})\n        n.len = len\n      }\n      // set gc'd\n      n.gc = true\n      // can extend left?\n      if (\n        prev != null &&\n        prev.gc &&\n        Y.utils.compareIds([prev.id[0], prev.id[1] + prev.len], n.id)\n      ) {\n        prev.len += n.len\n        yield* this.ds.delete(n.id)\n        n = prev\n        // ds.put n here?\n      }\n      // can extend right?\n      if (\n        next != null &&\n        next.gc &&\n        Y.utils.compareIds([n.id[0], n.id[1] + n.len], next.id)\n      ) {\n        n.len += next.len\n        yield* this.ds.delete(next.id)\n      }\n      yield* this.ds.put(n)\n      yield* this.updateState(n.id[0])\n    }\n    /*\n      Mark an operation as deleted.\n\n      returns the delete node\n    */\n    * markDeleted (id, length) {\n      if (length == null) {\n        length = 1\n      }\n      // this.mem.push([\"del\", id]);\n      var n = yield* this.ds.findWithUpperBound(id)\n      if (n != null && n.id[0] === id[0]) {\n        if (n.id[1] <= id[1] && id[1] <= n.id[1] + n.len) {\n          // id is in n's range\n          var diff = id[1] + length - (n.id[1] + n.len) // overlapping right\n          if (diff > 0) {\n            // id+length overlaps n\n            if (!n.gc) {\n              n.len += diff\n            } else {\n              diff = n.id[1] + n.len - id[1] // overlapping left (id till n.end)\n              if (diff < length) {\n                // a partial deletion\n                n = {id: [id[0], id[1] + diff], len: length - diff, gc: false}\n                yield* this.ds.put(n)\n              } else {\n                // already gc'd\n                throw new Error('Cannot happen! (it dit though.. :()')\n                // return n\n              }\n            }\n          } else {\n            // no overlapping, already deleted\n            return n\n          }\n        } else {\n          // cannot extend left (there is no left!)\n          n = {id: id, len: length, gc: false}\n          yield* this.ds.put(n) // TODO: you double-put !!\n        }\n      } else {\n        // cannot extend left\n        n = {id: id, len: length, gc: false}\n        yield* this.ds.put(n)\n      }\n      // can extend right?\n      var next = yield* this.ds.findNext(n.id)\n      if (\n        next != null &&\n        n.id[0] === next.id[0] &&\n        n.id[1] + n.len >= next.id[1]\n      ) {\n        diff = n.id[1] + n.len - next.id[1] // from next.start to n.end\n        while (diff >= 0) {\n          // n overlaps with next\n          if (next.gc) {\n            // gc is stronger, so reduce length of n\n            n.len -= diff\n            if (diff >= next.len) {\n              // delete the missing range after next\n              diff = diff - next.len // missing range after next\n              if (diff > 0) {\n                yield* this.ds.put(n) // unneccessary? TODO!\n                yield* this.markDeleted([next.id[0], next.id[1] + next.len], diff)\n              }\n            }\n            break\n          } else {\n            // we can extend n with next\n            if (diff > next.len) {\n              // n is even longer than next\n              // get next.next, and try to extend it\n              var _next = yield* this.ds.findNext(next.id)\n              yield* this.ds.delete(next.id)\n              if (_next == null || n.id[0] !== _next.id[0]) {\n                break\n              } else {\n                next = _next\n                diff = n.id[1] + n.len - next.id[1] // from next.start to n.end\n                // continue!\n              }\n            } else {\n              // n just partially overlaps with next. extend n, delete next, and break this loop\n              n.len += next.len - diff\n              yield* this.ds.delete(next.id)\n              break\n            }\n          }\n        }\n      }\n      yield* this.ds.put(n)\n      return n\n    }\n    /*\n      Call this method when the client is connected&synced with the\n      other clients (e.g. master). This will query the database for\n      operations that can be gc'd and add them to the garbage collector.\n    */\n    * garbageCollectAfterSync () {\n      if (this.store.gc1.length > 0 || this.store.gc2.length > 0) {\n        console.warn('gc should be empty after sync')\n      }\n      yield* this.os.iterate(this, null, null, function * (op) {\n        if (op.gc) {\n          delete op.gc\n          yield* this.setOperation(op)\n        }\n        if (op.parent != null) {\n          var parentDeleted = yield* this.isDeleted(op.parent)\n          if (parentDeleted) {\n            op.gc = true\n            if (!op.deleted) {\n              yield* this.markDeleted(op.id, op.content != null ? op.content.length : 1)\n              op.deleted = true\n              if (op.opContent != null) {\n                yield* this.deleteOperation(op.opContent)\n              }\n              if (op.requires != null) {\n                for (var i = 0; i < op.requires.length; i++) {\n                  yield* this.deleteOperation(op.requires[i])\n                }\n              }\n            }\n            yield* this.setOperation(op)\n            this.store.gc1.push(op.id) // this is ok becaues its shortly before sync (otherwise use queueGarbageCollector!)\n            return\n          }\n        }\n        if (op.deleted) {\n          var left = null\n          if (op.left != null) {\n            left = yield* this.getInsertion(op.left)\n          }\n          yield* this.store.addToGarbageCollector.call(this, op, left)\n        }\n      })\n    }\n    /*\n      Really remove an op and all its effects.\n      The complicated case here is the Insert operation:\n      * reset left\n      * reset right\n      * reset parent.start\n      * reset parent.end\n      * reset origins of all right ops\n    */\n    * garbageCollectOperation (id) {\n      this.store.addToDebug('yield* this.garbageCollectOperation(', id, ')')\n      var o = yield* this.getOperation(id)\n      yield* this.markGarbageCollected(id, (o != null && o.content != null) ? o.content.length : 1) // always mark gc'd\n      // if op exists, then clean that mess up..\n      if (o != null) {\n        var deps = []\n        if (o.opContent != null) {\n          deps.push(o.opContent)\n        }\n        if (o.requires != null) {\n          deps = deps.concat(o.requires)\n        }\n        for (var i = 0; i < deps.length; i++) {\n          var dep = yield* this.getOperation(deps[i])\n          if (dep != null) {\n            if (!dep.deleted) {\n              yield* this.deleteOperation(dep.id)\n              dep = yield* this.getOperation(dep.id)\n            }\n            dep.gc = true\n            yield* this.setOperation(dep)\n            this.store.queueGarbageCollector(dep.id)\n          } else {\n            yield* this.markGarbageCollected(deps[i], 1)\n          }\n        }\n\n        // remove gc'd op from the left op, if it exists\n        if (o.left != null) {\n          var left = yield* this.getInsertion(o.left)\n          left.right = o.right\n          yield* this.setOperation(left)\n        }\n        // remove gc'd op from the right op, if it exists\n        // also reset origins of right ops\n        if (o.right != null) {\n          var right = yield* this.getOperation(o.right)\n          right.left = o.left\n          yield* this.setOperation(right)\n\n          if (o.originOf != null && o.originOf.length > 0) {\n            // find new origin of right ops\n            // origin is the first left deleted operation\n            var neworigin = o.left\n            var neworigin_ = null\n            while (neworigin != null) {\n              neworigin_ = yield* this.getInsertion(neworigin)\n              if (neworigin_.deleted) {\n                break\n              }\n              neworigin = neworigin_.left\n            }\n\n            // reset origin of all right ops (except first right - duh!),\n\n            /* ** The following code does not rely on the the originOf property **\n                  I recently added originOf to all Insert Operations (see Struct.Insert.execute),\n                  which saves which operations originate in a Insert operation.\n                  Garbage collecting without originOf is more memory efficient, but is nearly impossible for large texts, or lists!\n                  But I keep this code for now\n            ```\n            // reset origin of right\n            right.origin = neworigin\n            // search until you find origin pointer to the left of o\n            if (right.right != null) {\n              var i = yield* this.getOperation(right.right)\n              var ids = [o.id, o.right]\n              while (ids.some(function (id) {\n                return Y.utils.compareIds(id, i.origin)\n              })) {\n                if (Y.utils.compareIds(i.origin, o.id)) {\n                  // reset origin of i\n                  i.origin = neworigin\n                  yield* this.setOperation(i)\n                }\n                // get next i\n                if (i.right == null) {\n                  break\n                } else {\n                  ids.push(i.id)\n                  i = yield* this.getOperation(i.right)\n                }\n              }\n            }\n            ```\n            */\n            // ** Now the new implementation starts **\n            // reset neworigin of all originOf[*]\n            for (var _i in o.originOf) {\n              var originsIn = yield* this.getOperation(o.originOf[_i])\n              if (originsIn != null) {\n                originsIn.origin = neworigin\n                yield* this.setOperation(originsIn)\n              }\n            }\n            if (neworigin != null) {\n              if (neworigin_.originOf == null) {\n                neworigin_.originOf = o.originOf\n              } else {\n                neworigin_.originOf = o.originOf.concat(neworigin_.originOf)\n              }\n              yield* this.setOperation(neworigin_)\n            }\n            // we don't need to set right here, because\n            // right should be in o.originOf => it is set it the previous for loop\n          }\n        }\n        // o may originate in another operation.\n        // Since o is deleted, we have to reset o.origin's `originOf` property\n        if (o.origin != null) {\n          var origin = yield* this.getInsertion(o.origin)\n          origin.originOf = origin.originOf.filter(function (_id) {\n            return !Y.utils.compareIds(id, _id)\n          })\n          yield* this.setOperation(origin)\n        }\n        var parent\n        if (o.parent != null) {\n          parent = yield* this.getOperation(o.parent)\n        }\n        // remove gc'd op from parent, if it exists\n        if (parent != null) {\n          var setParent = false // whether to save parent to the os\n          if (o.parentSub != null) {\n            if (Y.utils.compareIds(parent.map[o.parentSub], o.id)) {\n              setParent = true\n              if (o.right != null) {\n                parent.map[o.parentSub] = o.right\n              } else {\n                delete parent.map[o.parentSub]\n              }\n            }\n          } else {\n            if (Y.utils.compareIds(parent.start, o.id)) {\n              // gc'd op is the start\n              setParent = true\n              parent.start = o.right\n            }\n            if (Y.utils.matchesId(o, parent.end)) {\n              // gc'd op is the end\n              setParent = true\n              parent.end = o.left\n            }\n          }\n          if (setParent) {\n            yield* this.setOperation(parent)\n          }\n        }\n        // finally remove it from the os\n        yield* this.removeOperation(o.id)\n      }\n    }\n    * checkDeleteStoreForState (state) {\n      var n = yield* this.ds.findWithUpperBound([state.user, state.clock])\n      if (n != null && n.id[0] === state.user && n.gc) {\n        state.clock = Math.max(state.clock, n.id[1] + n.len)\n      }\n    }\n    * updateState (user) {\n      var state = yield* this.getState(user)\n      yield* this.checkDeleteStoreForState(state)\n      var o = yield* this.getInsertion([user, state.clock])\n      var oLength = (o != null && o.content != null) ? o.content.length : 1\n      while (o != null && user === o.id[0] && o.id[1] <= state.clock && o.id[1] + oLength > state.clock) {\n        // either its a new operation (1. case), or it is an operation that was deleted, but is not yet in the OS\n        state.clock += oLength\n        yield* this.checkDeleteStoreForState(state)\n        o = yield* this.os.findNext(o.id)\n        oLength = (o != null && o.content != null) ? o.content.length : 1\n      }\n      yield* this.setState(state)\n    }\n    /*\n      apply a delete set in order to get\n      the state of the supplied ds\n    */\n    * applyDeleteSet (ds) {\n      var deletions = []\n\n      for (var user in ds) {\n        var dv = ds[user]\n        var pos = 0\n        var d = dv[pos]\n        yield* this.ds.iterate(this, [user, 0], [user, Number.MAX_VALUE], function * (n) {\n          // cases:\n          // 1. d deletes something to the right of n\n          //  => go to next n (break)\n          // 2. d deletes something to the left of n\n          //  => create deletions\n          //  => reset d accordingly\n          //  *)=> if d doesn't delete anything anymore, go to next d (continue)\n          // 3. not 2) and d deletes something that also n deletes\n          //  => reset d so that it doesn't contain n's deletion\n          //  *)=> if d does not delete anything anymore, go to next d (continue)\n          while (d != null) {\n            var diff = 0 // describe the diff of length in 1) and 2)\n            if (n.id[1] + n.len <= d[0]) {\n              // 1)\n              break\n            } else if (d[0] < n.id[1]) {\n              // 2)\n              // delete maximum the len of d\n              // else delete as much as possible\n              diff = Math.min(n.id[1] - d[0], d[1])\n              deletions.push([user, d[0], diff, d[2]])\n            } else {\n              // 3)\n              diff = n.id[1] + n.len - d[0] // never null (see 1)\n              if (d[2] && !n.gc) {\n                // d marks as gc'd but n does not\n                // then delete either way\n                deletions.push([user, d[0], Math.min(diff, d[1]), d[2]])\n              }\n            }\n            if (d[1] <= diff) {\n              // d doesn't delete anything anymore\n              d = dv[++pos]\n            } else {\n              d[0] = d[0] + diff // reset pos\n              d[1] = d[1] - diff // reset length\n            }\n          }\n        })\n        // for the rest.. just apply it\n        for (; pos < dv.length; pos++) {\n          d = dv[pos]\n          deletions.push([user, d[0], d[1], d[2]])\n        }\n      }\n      for (var i = 0; i < deletions.length; i++) {\n        var del = deletions[i]\n        // always try to delete..\n        yield* this.deleteOperation([del[0], del[1]], del[2])\n        if (del[3]) {\n          // gc..\n          yield* this.markGarbageCollected([del[0], del[1]], del[2]) // always mark gc'd\n          // remove operation..\n          var counter = del[1] + del[2]\n          while (counter >= del[1]) {\n            var o = yield* this.os.findWithUpperBound([del[0], counter - 1])\n            if (o == null) {\n              break\n            }\n            var oLen = o.content != null ? o.content.length : 1\n            if (o.id[0] !== del[0] || o.id[1] + oLen <= del[1]) {\n              // not in range\n              break\n            }\n            if (o.id[1] + oLen > del[1] + del[2]) {\n              // overlaps right\n              o = yield* this.getInsertionCleanEnd([del[0], del[1] + del[2] - 1])\n            }\n            if (o.id[1] < del[1]) {\n              // overlaps left\n              o = yield* this.getInsertionCleanStart([del[0], del[1]])\n            }\n            counter = o.id[1]\n            yield* this.garbageCollectOperation(o.id)\n          }\n        }\n        if (this.store.forwardAppliedOperations) {\n          var ops = []\n          ops.push({struct: 'Delete', target: [del[0], del[1]], length: del[2]})\n          this.store.y.connector.broadcastOps(ops)\n        }\n      }\n    }\n    * isGarbageCollected (id) {\n      var n = yield* this.ds.findWithUpperBound(id)\n      return n != null && n.id[0] === id[0] && id[1] < n.id[1] + n.len && n.gc\n    }\n    /*\n      A DeleteSet (ds) describes all the deleted ops in the OS\n    */\n    * getDeleteSet () {\n      var ds = {}\n      yield* this.ds.iterate(this, null, null, function * (n) {\n        var user = n.id[0]\n        var counter = n.id[1]\n        var len = n.len\n        var gc = n.gc\n        var dv = ds[user]\n        if (dv === void 0) {\n          dv = []\n          ds[user] = dv\n        }\n        dv.push([counter, len, gc])\n      })\n      return ds\n    }\n    * isDeleted (id) {\n      var n = yield* this.ds.findWithUpperBound(id)\n      return n != null && n.id[0] === id[0] && id[1] < n.id[1] + n.len\n    }\n    * setOperation (op) {\n      yield* this.os.put(op)\n      return op\n    }\n    * addOperation (op) {\n      yield* this.os.put(op)\n      if (!this.store.y.connector.isDisconnected() && this.store.forwardAppliedOperations && typeof op.id[1] !== 'string') {\n        // is connected, and this is not going to be send in addOperation\n        this.store.y.connector.broadcastOps([op])\n      }\n    }\n    // if insertion, try to combine with left insertion (if both have content property)\n    * tryCombineWithLeft (op) {\n      if (\n        op != null &&\n        op.left != null &&\n        op.content != null &&\n        op.left[0] === op.id[0] &&\n        Y.utils.compareIds(op.left, op.origin)\n      ) {\n        var left = yield* this.getInsertion(op.left)\n        if (left.content != null &&\n            left.id[1] + left.content.length === op.id[1] &&\n            left.originOf.length === 1 &&\n            !left.gc && !left.deleted &&\n            !op.gc && !op.deleted\n        ) {\n          // combine!\n          if (op.originOf != null) {\n            left.originOf = op.originOf\n          } else {\n            delete left.originOf\n          }\n          left.content = left.content.concat(op.content)\n          left.right = op.right\n          yield* this.os.delete(op.id)\n          yield* this.setOperation(left)\n        }\n      }\n    }\n    * getInsertion (id) {\n      var ins = yield* this.os.findWithUpperBound(id)\n      if (ins == null) {\n        return null\n      } else {\n        var len = ins.content != null ? ins.content.length : 1 // in case of opContent\n        if (id[0] === ins.id[0] && id[1] < ins.id[1] + len) {\n          return ins\n        } else {\n          return null\n        }\n      }\n    }\n    * getInsertionCleanStartEnd (id) {\n      yield* this.getInsertionCleanStart(id)\n      return yield* this.getInsertionCleanEnd(id)\n    }\n    // Return an insertion such that id is the first element of content\n    // This function manipulates an operation, if necessary\n    * getInsertionCleanStart (id) {\n      var ins = yield* this.getInsertion(id)\n      if (ins != null) {\n        if (ins.id[1] === id[1]) {\n          return ins\n        } else {\n          var left = Y.utils.copyObject(ins)\n          ins.content = left.content.splice(id[1] - ins.id[1])\n          ins.id = id\n          var leftLid = Y.utils.getLastId(left)\n          ins.origin = leftLid\n          left.originOf = [ins.id]\n          left.right = ins.id\n          ins.left = leftLid\n          // debugger // check\n          yield* this.setOperation(left)\n          yield* this.setOperation(ins)\n          if (left.gc) {\n            this.store.queueGarbageCollector(ins.id)\n          }\n          return ins\n        }\n      } else {\n        return null\n      }\n    }\n    // Return an insertion such that id is the last element of content\n    // This function manipulates an operation, if necessary\n    * getInsertionCleanEnd (id) {\n      var ins = yield* this.getInsertion(id)\n      if (ins != null) {\n        if (ins.content == null || (ins.id[1] + ins.content.length - 1 === id[1])) {\n          return ins\n        } else {\n          var right = Y.utils.copyObject(ins)\n          right.content = ins.content.splice(id[1] - ins.id[1] + 1) // cut off remainder\n          right.id = [id[0], id[1] + 1]\n          var insLid = Y.utils.getLastId(ins)\n          right.origin = insLid\n          ins.originOf = [right.id]\n          ins.right = right.id\n          right.left = insLid\n          // debugger // check\n          yield* this.setOperation(right)\n          yield* this.setOperation(ins)\n          if (ins.gc) {\n            this.store.queueGarbageCollector(right.id)\n          }\n          return ins\n        }\n      } else {\n        return null\n      }\n    }\n    * getOperation (id/* :any */)/* :Transaction<any> */ {\n      var o = yield* this.os.find(id)\n      if (id[0] !== '_' || o != null) {\n        return o\n      } else { // type is string\n        // generate this operation?\n        var comp = id[1].split('_')\n        if (comp.length > 1) {\n          var struct = comp[0]\n          var op = Y.Struct[struct].create(id)\n          op.type = comp[1]\n          yield* this.setOperation(op)\n          return op\n        } else {\n          // won't be called. but just in case..\n          console.error('Unexpected case. How can this happen?')\n          debugger // eslint-disable-line\n          return null\n        }\n      }\n    }\n    * removeOperation (id) {\n      yield* this.os.delete(id)\n    }\n    * setState (state) {\n      var val = {\n        id: [state.user],\n        clock: state.clock\n      }\n      yield* this.ss.put(val)\n    }\n    * getState (user) {\n      var n = yield* this.ss.find([user])\n      var clock = n == null ? null : n.clock\n      if (clock == null) {\n        clock = 0\n      }\n      return {\n        user: user,\n        clock: clock\n      }\n    }\n    * getStateVector () {\n      var stateVector = []\n      yield* this.ss.iterate(this, null, null, function * (n) {\n        stateVector.push({\n          user: n.id[0],\n          clock: n.clock\n        })\n      })\n      return stateVector\n    }\n    * getStateSet () {\n      var ss = {}\n      yield* this.ss.iterate(this, null, null, function * (n) {\n        ss[n.id[0]] = n.clock\n      })\n      return ss\n    }\n    /*\n      Here, we make all missing operations executable for the receiving user.\n\n      Notes:\n        startSS: denotes to the SV that the remote user sent\n        currSS:  denotes to the state vector that the user should have if he\n                 applies all already sent operations (increases is each step)\n\n      We face several problems:\n      * Execute op as is won't work because ops depend on each other\n       -> find a way so that they do not anymore\n      * When changing left, must not go more to the left than the origin\n      * When changing right, you have to consider that other ops may have op\n        as their origin, this means that you must not set one of these ops\n        as the new right (interdependencies of ops)\n      * can't just go to the right until you find the first known operation,\n        With currSS\n          -> interdependency of ops is a problem\n        With startSS\n          -> leads to inconsistencies when two users join at the same time.\n             Then the position depends on the order of execution -> error!\n\n        Solution:\n        -> re-create originial situation\n          -> set op.left = op.origin (which never changes)\n          -> set op.right\n               to the first operation that is known (according to startSS)\n               or to the first operation that has an origin that is not to the\n               right of op.\n          -> Enforces unique execution order -> happy user\n\n        Improvements: TODO\n          * Could set left to origin, or the first known operation\n            (startSS or currSS.. ?)\n            -> Could be necessary when I turn GC again.\n            -> Is a bad(ish) idea because it requires more computation\n\n      What we do:\n      * Iterate over all missing operations.\n      * When there is an operation, where the right op is known, send this op all missing ops to the left to the user\n      * I explained above what we have to do with each operation. Here is how we do it efficiently:\n        1. Go to the left until you find either op.origin, or a known operation (let o denote current operation in the iteration)\n        2. Found a known operation -> set op.left = o, and send it to the user. stop\n        3. Found o = op.origin -> set op.left = op.origin, and send it to the user. start again from 1. (set op = o)\n        4. Found some o -> set o.right = op, o.left = o.origin, send it to the user, continue\n    */\n    * getOperations (startSS) {\n      // TODO: use bounds here!\n      if (startSS == null) {\n        startSS = {}\n      }\n      var send = []\n\n      var endSV = yield* this.getStateVector()\n      for (var endState of endSV) {\n        var user = endState.user\n        if (user === '_') {\n          continue\n        }\n        var startPos = startSS[user] || 0\n        if (startPos > 0) {\n          // There is a change that [user, startPos] is in a composed Insertion (with a smaller counter)\n          // find out if that is the case\n          var firstMissing = yield* this.getInsertion([user, startPos])\n          if (firstMissing != null) {\n            // update startPos\n            startPos = firstMissing.id[1]\n            startSS[user] = startPos\n          }\n        }\n        yield* this.os.iterate(this, [user, startPos], [user, Number.MAX_VALUE], function * (op) {\n          op = Y.Struct[op.struct].encode(op)\n          if (op.struct !== 'Insert') {\n            send.push(op)\n          } else if (op.right == null || op.right[1] < (startSS[op.right[0]] || 0)) {\n            // case 1. op.right is known\n            var o = op\n            // Remember: ?\n            // -> set op.right\n            //    1. to the first operation that is known (according to startSS)\n            //    2. or to the first operation that has an origin that is not to the\n            //      right of op.\n            // For this we maintain a list of ops which origins are not found yet.\n            var missing_origins = [op]\n            var newright = op.right\n            while (true) {\n              if (o.left == null) {\n                op.left = null\n                send.push(op)\n                if (!Y.utils.compareIds(o.id, op.id)) {\n                  o = Y.Struct[op.struct].encode(o)\n                  o.right = missing_origins[missing_origins.length - 1].id\n                  send.push(o)\n                }\n                break\n              }\n              o = yield* this.getInsertion(o.left)\n              // we set another o, check if we can reduce $missing_origins\n              while (missing_origins.length > 0 && Y.utils.matchesId(o, missing_origins[missing_origins.length - 1].origin)) {\n                missing_origins.pop()\n              }\n              if (o.id[1] < (startSS[o.id[0]] || 0)) {\n                // case 2. o is known\n                op.left = Y.utils.getLastId(o)\n                send.push(op)\n                break\n              } else if (Y.utils.matchesId(o, op.origin)) {\n                // case 3. o is op.origin\n                op.left = op.origin\n                send.push(op)\n                op = Y.Struct[op.struct].encode(o)\n                op.right = newright\n                if (missing_origins.length > 0) {\n                  console.log('This should not happen .. :( please report this')\n                }\n                missing_origins = [op]\n              } else {\n                // case 4. send o, continue to find op.origin\n                var s = Y.Struct[op.struct].encode(o)\n                s.right = missing_origins[missing_origins.length - 1].id\n                s.left = s.origin\n                send.push(s)\n                missing_origins.push(o)\n              }\n            }\n          }\n        })\n      }\n      return send.reverse()\n    }\n    /* this is what we used before.. use this as a reference..\n    * makeOperationReady (startSS, op) {\n      op = Y.Struct[op.struct].encode(op)\n      op = Y.utils.copyObject(op) -- use copyoperation instead now!\n      var o = op\n      var ids = [op.id]\n      // search for the new op.right\n      // it is either the first known op (according to startSS)\n      // or the o that has no origin to the right of op\n      // (this is why we use the ids array)\n      while (o.right != null) {\n        var right = yield* this.getOperation(o.right)\n        if (o.right[1] < (startSS[o.right[0]] || 0) || !ids.some(function (id) {\n          return Y.utils.compareIds(id, right.origin)\n        })) {\n          break\n        }\n        ids.push(o.right)\n        o = right\n      }\n      op.right = o.right\n      op.left = op.origin\n      return op\n    }\n    */\n    * flush () {\n      yield* this.os.flush()\n      yield* this.ss.flush()\n      yield* this.ds.flush()\n    }\n  }\n  Y.Transaction = TransactionInterface\n}\n","/* @flow */\n'use strict'\n\n/*\n  EventHandler is an helper class for constructing custom types.\n\n  Why: When constructing custom types, you sometimes want your types to work\n  synchronous: E.g.\n  ``` Synchronous\n    mytype.setSomething(\"yay\")\n    mytype.getSomething() === \"yay\"\n  ```\n  versus\n  ``` Asynchronous\n    mytype.setSomething(\"yay\")\n    mytype.getSomething() === undefined\n    mytype.waitForSomething().then(function(){\n      mytype.getSomething() === \"yay\"\n    })\n  ```\n\n  The structures usually work asynchronously (you have to wait for the\n  database request to finish). EventHandler helps you to make your type\n  synchronous.\n*/\nmodule.exports = function (Y /* : any*/) {\n  Y.utils = {}\n\n  class EventListenerHandler {\n    constructor () {\n      this.eventListeners = []\n    }\n    destroy () {\n      this.eventListeners = null\n    }\n     /*\n      Basic event listener boilerplate...\n    */\n    addEventListener (f) {\n      this.eventListeners.push(f)\n    }\n    removeEventListener (f) {\n      this.eventListeners = this.eventListeners.filter(function (g) {\n        return f !== g\n      })\n    }\n    removeAllEventListeners () {\n      this.eventListeners = []\n    }\n    callEventListeners (event) {\n      for (var i = 0; i < this.eventListeners.length; i++) {\n        try {\n          this.eventListeners[i](event)\n        } catch (e) {\n          console.error('User events must not throw Errors!')\n        }\n      }\n    }\n  }\n  Y.utils.EventListenerHandler = EventListenerHandler\n\n  class EventHandler extends EventListenerHandler {\n    /* ::\n    waiting: Array<Insertion | Deletion>;\n    awaiting: number;\n    onevent: Function;\n    eventListeners: Array<Function>;\n    */\n    /*\n      onevent: is called when the structure changes.\n\n      Note: \"awaiting opertations\" is used to denote operations that were\n      prematurely called. Events for received operations can not be executed until\n      all prematurely called operations were executed (\"waiting operations\")\n    */\n    constructor (onevent /* : Function */) {\n      super()\n      this.waiting = []\n      this.awaiting = 0\n      this.onevent = onevent\n    }\n    destroy () {\n      super.destroy()\n      this.waiting = null\n      this.awaiting = null\n      this.onevent = null\n    }\n    /*\n      Call this when a new operation arrives. It will be executed right away if\n      there are no waiting operations, that you prematurely executed\n    */\n    receivedOp (op) {\n      if (this.awaiting <= 0) {\n        this.onevent(op)\n      } else if (op.struct === 'Delete') {\n        var self = this\n        var checkDelete = function checkDelete (d) {\n          if (d.length == null) {\n            throw new Error('This shouldn\\'t happen! d.length must be defined!')\n          }\n          // we check if o deletes something in self.waiting\n          // if so, we remove the deleted operation\n          for (var w = 0; w < self.waiting.length; w++) {\n            var i = self.waiting[w]\n            if (i.struct === 'Insert' && i.id[0] === d.target[0]) {\n              var iLength = i.hasOwnProperty('content') ? i.content.length : 1\n              var dStart = d.target[1]\n              var dEnd = d.target[1] + (d.length || 1)\n              var iStart = i.id[1]\n              var iEnd = i.id[1] + iLength\n              // Check if they don't overlap\n              if (iEnd <= dStart || dEnd <= iStart) {\n                // no overlapping\n                continue\n              }\n              // we check all overlapping cases. All cases:\n              /*\n                1)  iiiii\n                      ddddd\n                    --> modify i and d\n                2)  iiiiiii\n                      ddddd\n                    --> modify i, remove d\n                3)  iiiiiii\n                      ddd\n                    --> remove d, modify i, and create another i (for the right hand side)\n                4)  iiiii\n                    ddddddd\n                    --> remove i, modify d\n                5)  iiiiiii\n                    ddddddd\n                    --> remove both i and d (**)\n                6)  iiiiiii\n                    ddddd\n                    --> modify i, remove d\n                7)    iii\n                    ddddddd\n                    --> remove i, create and apply two d with checkDelete(d) (**)\n                8)    iiiii\n                    ddddddd\n                    --> remove i, modify d (**)\n                9)    iiiii\n                    ddddd\n                    --> modify i and d\n                (**) (also check if i contains content or type)\n              */\n              // TODO: I left some debugger statements, because I want to debug all cases once in production. REMEMBER END TODO\n              if (iStart < dStart) {\n                if (dStart < iEnd) {\n                  if (iEnd < dEnd) {\n                    // Case 1\n                    // remove the right part of i's content\n                    i.content.splice(dStart - iStart)\n                    // remove the start of d's deletion\n                    d.length = dEnd - iEnd\n                    d.target = [d.target[0], iEnd]\n                    continue\n                  } else if (iEnd === dEnd) {\n                    // Case 2\n                    i.content.splice(dStart - iStart)\n                    // remove d, we do that by simply ending this function\n                    return\n                  } else { // (dEnd < iEnd)\n                    // Case 3\n                    var newI = {\n                      id: [i.id[0], dEnd],\n                      content: i.content.slice(dEnd - iStart),\n                      struct: 'Insert'\n                    }\n                    self.waiting.push(newI)\n                    i.content.splice(dStart - iStart)\n                    return\n                  }\n                }\n              } else if (dStart === iStart) {\n                if (iEnd < dEnd) {\n                  // Case 4\n                  d.length = dEnd - iEnd\n                  d.target = [d.target[0], iEnd]\n                  i.content = []\n                  continue\n                } else if (iEnd === dEnd) {\n                  // Case 5\n                  self.waiting.splice(w, 1)\n                  return\n                } else { // (dEnd < iEnd)\n                  // Case 6\n                  i.content = i.content.slice(dEnd - iStart)\n                  i.id = [i.id[0], dEnd]\n                  return\n                }\n              } else { // (dStart < iStart)\n                if (iStart < dEnd) {\n                  // they overlap\n                  /*\n                  7)    iii\n                      ddddddd\n                      --> remove i, create and apply two d with checkDelete(d) (**)\n                  8)    iiiii\n                      ddddddd\n                      --> remove i, modify d (**)\n                  9)    iiiii\n                      ddddd\n                      --> modify i and d\n                  */\n                  if (iEnd < dEnd) {\n                    // Case 7\n                    // debugger // TODO: You did not test this case yet!!!! (add the debugger here)\n                    self.waiting.splice(w, 1)\n                    checkDelete({\n                      target: [d.target[0], dStart],\n                      length: iStart - dStart,\n                      struct: 'Delete'\n                    })\n                    checkDelete({\n                      target: [d.target[0], iEnd],\n                      length: iEnd - dEnd,\n                      struct: 'Delete'\n                    })\n                    return\n                  } else if (iEnd === dEnd) {\n                    // Case 8\n                    self.waiting.splice(w, 1)\n                    w--\n                    d.length -= iLength\n                    continue\n                  } else { // dEnd < iEnd\n                    // Case 9\n                    d.length = iStart - dStart\n                    i.content.splice(0, dEnd - iStart)\n                    i.id = [i.id[0], dEnd]\n                    continue\n                  }\n                }\n              }\n            }\n          }\n          // finished with remaining operations\n          self.waiting.push(d)\n        }\n        if (op.key == null) {\n          // deletes in list\n          checkDelete(op)\n        } else {\n          // deletes in map\n          this.waiting.push(op)\n        }\n      } else {\n        this.waiting.push(op)\n      }\n    }\n    /*\n      You created some operations, and you want the `onevent` function to be\n      called right away. Received operations will not be executed untill all\n      prematurely called operations are executed\n    */\n    awaitAndPrematurelyCall (ops) {\n      this.awaiting++\n      ops.map(Y.utils.copyOperation).forEach(this.onevent)\n    }\n    * awaitOps (transaction, f, args) {\n      function notSoSmartSort (array) {\n        // this function sorts insertions in a executable order\n        var result = []\n        while (array.length > 0) {\n          for (var i = 0; i < array.length; i++) {\n            var independent = true\n            for (var j = 0; j < array.length; j++) {\n              if (Y.utils.matchesId(array[j], array[i].left)) {\n                // array[i] depends on array[j]\n                independent = false\n                break\n              }\n            }\n            if (independent) {\n              result.push(array.splice(i, 1)[0])\n              i--\n            }\n          }\n        }\n        return result\n      }\n      var before = this.waiting.length\n      // somehow create new operations\n      yield* f.apply(transaction, args)\n      // remove all appended ops / awaited ops\n      this.waiting.splice(before)\n      if (this.awaiting > 0) this.awaiting--\n      // if there are no awaited ops anymore, we can update all waiting ops, and send execute them (if there are still no awaited ops)\n      if (this.awaiting === 0 && this.waiting.length > 0) {\n        // update all waiting ops\n        for (let i = 0; i < this.waiting.length; i++) {\n          var o = this.waiting[i]\n          if (o.struct === 'Insert') {\n            var _o = yield* transaction.getInsertion(o.id)\n            if (_o.parentSub != null && _o.left != null) {\n              // if o is an insertion of a map struc (parentSub is defined), then it shouldn't be necessary to compute left\n              this.waiting.splice(i, 1)\n              i-- // update index\n            } else if (!Y.utils.compareIds(_o.id, o.id)) {\n              // o got extended\n              o.left = [o.id[0], o.id[1] - 1]\n            } else if (_o.left == null) {\n              o.left = null\n            } else {\n              // find next undeleted op\n              var left = yield* transaction.getInsertion(_o.left)\n              while (left.deleted != null) {\n                if (left.left != null) {\n                  left = yield* transaction.getInsertion(left.left)\n                } else {\n                  left = null\n                  break\n                }\n              }\n              o.left = left != null ? Y.utils.getLastId(left) : null\n            }\n          }\n        }\n        // the previous stuff was async, so we have to check again!\n        // We also pull changes from the bindings, if there exists such a method, this could increase awaiting too\n        if (this._pullChanges != null) {\n          this._pullChanges()\n        }\n        if (this.awaiting === 0) {\n          // sort by type, execute inserts first\n          var ins = []\n          var dels = []\n          this.waiting.forEach(function (o) {\n            if (o.struct === 'Delete') {\n              dels.push(o)\n            } else {\n              ins.push(o)\n            }\n          })\n          this.waiting = []\n          // put in executable order\n          ins = notSoSmartSort(ins)\n          // this.onevent can trigger the creation of another operation\n          // -> check if this.awaiting increased & stop computation if it does\n          for (var i = 0; i < ins.length; i++) {\n            if (this.awaiting === 0) {\n              this.onevent(ins[i])\n            } else {\n              this.waiting = this.waiting.concat(ins.slice(i))\n              break\n            }\n          }\n          for (i = 0; i < dels.length; i++) {\n            if (this.awaiting === 0) {\n              this.onevent(dels[i])\n            } else {\n              this.waiting = this.waiting.concat(dels.slice(i))\n              break\n            }\n          }\n        }\n      }\n    }\n    // TODO: Remove awaitedInserts and awaitedDeletes in favor of awaitedOps, as they are deprecated and do not always work\n    // Do this in one of the coming releases that are breaking anyway\n    /*\n      Call this when you successfully awaited the execution of n Insert operations\n    */\n    awaitedInserts (n) {\n      var ops = this.waiting.splice(this.waiting.length - n)\n      for (var oid = 0; oid < ops.length; oid++) {\n        var op = ops[oid]\n        if (op.struct === 'Insert') {\n          for (var i = this.waiting.length - 1; i >= 0; i--) {\n            let w = this.waiting[i]\n            // TODO: do I handle split operations correctly here? Super unlikely, but yeah..\n            // Also: can this case happen? Can op be inserted in the middle of a larger op that is in $waiting?\n            if (w.struct === 'Insert') {\n              if (Y.utils.matchesId(w, op.left)) {\n                // include the effect of op in w\n                w.right = op.id\n                // exclude the effect of w in op\n                op.left = w.left\n              } else if (Y.utils.compareIds(w.id, op.right)) {\n                // similar..\n                w.left = Y.utils.getLastId(op)\n                op.right = w.right\n              }\n            }\n          }\n        } else {\n          throw new Error('Expected Insert Operation!')\n        }\n      }\n      this._tryCallEvents(n)\n    }\n    /*\n      Call this when you successfully awaited the execution of n Delete operations\n    */\n    awaitedDeletes (n, newLeft) {\n      var ops = this.waiting.splice(this.waiting.length - n)\n      for (var j = 0; j < ops.length; j++) {\n        var del = ops[j]\n        if (del.struct === 'Delete') {\n          if (newLeft != null) {\n            for (var i = 0; i < this.waiting.length; i++) {\n              let w = this.waiting[i]\n              // We will just care about w.left\n              if (w.struct === 'Insert' && Y.utils.compareIds(del.target, w.left)) {\n                w.left = newLeft\n              }\n            }\n          }\n        } else {\n          throw new Error('Expected Delete Operation!')\n        }\n      }\n      this._tryCallEvents(n)\n    }\n    /* (private)\n      Try to execute the events for the waiting operations\n    */\n    _tryCallEvents () {\n      function notSoSmartSort (array) {\n        var result = []\n        while (array.length > 0) {\n          for (var i = 0; i < array.length; i++) {\n            var independent = true\n            for (var j = 0; j < array.length; j++) {\n              if (Y.utils.matchesId(array[j], array[i].left)) {\n                // array[i] depends on array[j]\n                independent = false\n                break\n              }\n            }\n            if (independent) {\n              result.push(array.splice(i, 1)[0])\n              i--\n            }\n          }\n        }\n        return result\n      }\n      if (this.awaiting > 0) this.awaiting--\n      if (this.awaiting === 0 && this.waiting.length > 0) {\n        var ins = []\n        var dels = []\n        this.waiting.forEach(function (o) {\n          if (o.struct === 'Delete') {\n            dels.push(o)\n          } else {\n            ins.push(o)\n          }\n        })\n        ins = notSoSmartSort(ins)\n        ins.forEach(this.onevent)\n        dels.forEach(this.onevent)\n        this.waiting = []\n      }\n    }\n  }\n  Y.utils.EventHandler = EventHandler\n\n  /*\n    Default class of custom types!\n  */\n  class CustomType {\n\n  }\n  Y.utils.CustomType = CustomType\n\n  /*\n    A wrapper for the definition of a custom type.\n    Every custom type must have three properties:\n\n    * struct\n      - Structname of this type\n    * initType\n      - Given a model, creates a custom type\n    * class\n      - the constructor of the custom type (e.g. in order to inherit from a type)\n  */\n  class CustomTypeDefinition { // eslint-disable-line\n    /* ::\n    struct: any;\n    initType: any;\n    class: Function;\n    name: String;\n    */\n    constructor (def) {\n      if (def.struct == null ||\n        def.initType == null ||\n        def.class == null ||\n        def.name == null ||\n        def.createType == null\n      ) {\n        throw new Error('Custom type was not initialized correctly!')\n      }\n      this.struct = def.struct\n      this.initType = def.initType\n      this.createType = def.createType\n      this.class = def.class\n      this.name = def.name\n      if (def.appendAdditionalInfo != null) {\n        this.appendAdditionalInfo = def.appendAdditionalInfo\n      }\n      this.parseArguments = (def.parseArguments || function () {\n        return [this]\n      }).bind(this)\n      this.parseArguments.typeDefinition = this\n    }\n  }\n  Y.utils.CustomTypeDefinition = CustomTypeDefinition\n\n  Y.utils.isTypeDefinition = function isTypeDefinition (v) {\n    if (v != null) {\n      if (v instanceof Y.utils.CustomTypeDefinition) return [v]\n      else if (v.constructor === Array && v[0] instanceof Y.utils.CustomTypeDefinition) return v\n      else if (v instanceof Function && v.typeDefinition instanceof Y.utils.CustomTypeDefinition) return [v.typeDefinition]\n    }\n    return false\n  }\n\n  /*\n    Make a flat copy of an object\n    (just copy properties)\n  */\n  function copyObject (o) {\n    var c = {}\n    for (var key in o) {\n      c[key] = o[key]\n    }\n    return c\n  }\n  Y.utils.copyObject = copyObject\n\n  /*\n    Copy an operation, so that it can be manipulated.\n    Note: You must not change subproperties (except o.content)!\n  */\n  function copyOperation (o) {\n    o = copyObject(o)\n    if (o.content != null) {\n      o.content = o.content.map(function (c) { return c })\n    }\n    return o\n  }\n\n  Y.utils.copyOperation = copyOperation\n\n  /*\n    Defines a smaller relation on Id's\n  */\n  function smaller (a, b) {\n    return a[0] < b[0] || (a[0] === b[0] && (a[1] < b[1] || typeof a[1] < typeof b[1]))\n  }\n  Y.utils.smaller = smaller\n\n  function inDeletionRange (del, ins) {\n    return del.target[0] === ins[0] && del.target[1] <= ins[1] && ins[1] < del.target[1] + (del.length || 1)\n  }\n  Y.utils.inDeletionRange = inDeletionRange\n\n  function compareIds (id1, id2) {\n    if (id1 == null || id2 == null) {\n      return id1 === id2\n    } else {\n      return id1[0] === id2[0] && id1[1] === id2[1]\n    }\n  }\n  Y.utils.compareIds = compareIds\n\n  function matchesId (op, id) {\n    if (id == null || op == null) {\n      return id === op\n    } else {\n      if (id[0] === op.id[0]) {\n        if (op.content == null) {\n          return id[1] === op.id[1]\n        } else {\n          return id[1] >= op.id[1] && id[1] < op.id[1] + op.content.length\n        }\n      }\n    }\n  }\n  Y.utils.matchesId = matchesId\n\n  function getLastId (op) {\n    if (op.content == null || op.content.length === 1) {\n      return op.id\n    } else {\n      return [op.id[0], op.id[1] + op.content.length - 1]\n    }\n  }\n  Y.utils.getLastId = getLastId\n\n  function createEmptyOpsArray (n) {\n    var a = new Array(n)\n    for (var i = 0; i < a.length; i++) {\n      a[i] = {\n        id: [null, null]\n      }\n    }\n    return a\n  }\n\n  function createSmallLookupBuffer (Store) {\n    /*\n      This buffer implements a very small buffer that temporarily stores operations\n      after they are read / before they are written.\n      The buffer basically implements FIFO. Often requested lookups will be re-queued every time they are looked up / written.\n\n      It can speed up lookups on Operation Stores and State Stores. But it does not require notable use of memory or processing power.\n\n      Good for os and ss, bot not for ds (because it often uses methods that require a flush)\n\n      I tried to optimize this for performance, therefore no highlevel operations.\n    */\n    class SmallLookupBuffer extends Store {\n      constructor (arg1, arg2) {\n        // super(...arguments) -- do this when this is supported by stable nodejs\n        super(arg1, arg2)\n        this.writeBuffer = createEmptyOpsArray(5)\n        this.readBuffer = createEmptyOpsArray(10)\n      }\n      * find (id, noSuperCall) {\n        var i, r\n        for (i = this.readBuffer.length - 1; i >= 0; i--) {\n          r = this.readBuffer[i]\n          // we don't have to use compareids, because id is always defined!\n          if (r.id[1] === id[1] && r.id[0] === id[0]) {\n            // found r\n            // move r to the end of readBuffer\n            for (; i < this.readBuffer.length - 1; i++) {\n              this.readBuffer[i] = this.readBuffer[i + 1]\n            }\n            this.readBuffer[this.readBuffer.length - 1] = r\n            return r\n          }\n        }\n        var o\n        for (i = this.writeBuffer.length - 1; i >= 0; i--) {\n          r = this.writeBuffer[i]\n          if (r.id[1] === id[1] && r.id[0] === id[0]) {\n            o = r\n            break\n          }\n        }\n        if (i < 0 && noSuperCall === undefined) {\n          // did not reach break in last loop\n          // read id and put it to the end of readBuffer\n          o = yield* super.find(id)\n        }\n        if (o != null) {\n          for (i = 0; i < this.readBuffer.length - 1; i++) {\n            this.readBuffer[i] = this.readBuffer[i + 1]\n          }\n          this.readBuffer[this.readBuffer.length - 1] = o\n        }\n        return o\n      }\n      * put (o) {\n        var id = o.id\n        var i, r // helper variables\n        for (i = this.writeBuffer.length - 1; i >= 0; i--) {\n          r = this.writeBuffer[i]\n          if (r.id[1] === id[1] && r.id[0] === id[0]) {\n            // is already in buffer\n            // forget r, and move o to the end of writeBuffer\n            for (; i < this.writeBuffer.length - 1; i++) {\n              this.writeBuffer[i] = this.writeBuffer[i + 1]\n            }\n            this.writeBuffer[this.writeBuffer.length - 1] = o\n            break\n          }\n        }\n        if (i < 0) {\n          // did not reach break in last loop\n          // write writeBuffer[0]\n          var write = this.writeBuffer[0]\n          if (write.id[0] !== null) {\n            yield* super.put(write)\n          }\n          // put o to the end of writeBuffer\n          for (i = 0; i < this.writeBuffer.length - 1; i++) {\n            this.writeBuffer[i] = this.writeBuffer[i + 1]\n          }\n          this.writeBuffer[this.writeBuffer.length - 1] = o\n        }\n        // check readBuffer for every occurence of o.id, overwrite if found\n        // whether found or not, we'll append o to the readbuffer\n        for (i = 0; i < this.readBuffer.length - 1; i++) {\n          r = this.readBuffer[i + 1]\n          if (r.id[1] === id[1] && r.id[0] === id[0]) {\n            this.readBuffer[i] = o\n          } else {\n            this.readBuffer[i] = r\n          }\n        }\n        this.readBuffer[this.readBuffer.length - 1] = o\n      }\n      * delete (id) {\n        var i, r\n        for (i = 0; i < this.readBuffer.length; i++) {\n          r = this.readBuffer[i]\n          if (r.id[1] === id[1] && r.id[0] === id[0]) {\n            this.readBuffer[i] = {\n              id: [null, null]\n            }\n          }\n        }\n        yield* this.flush()\n        yield* super.delete(id)\n      }\n      * findWithLowerBound (id) {\n        var o = yield* this.find(id, true)\n        if (o != null) {\n          return o\n        } else {\n          yield* this.flush()\n          return yield* super.findWithLowerBound.apply(this, arguments)\n        }\n      }\n      * findWithUpperBound (id) {\n        var o = yield* this.find(id, true)\n        if (o != null) {\n          return o\n        } else {\n          yield* this.flush()\n          return yield* super.findWithUpperBound.apply(this, arguments)\n        }\n      }\n      * findNext () {\n        yield* this.flush()\n        return yield* super.findNext.apply(this, arguments)\n      }\n      * findPrev () {\n        yield* this.flush()\n        return yield* super.findPrev.apply(this, arguments)\n      }\n      * iterate () {\n        yield* this.flush()\n        yield* super.iterate.apply(this, arguments)\n      }\n      * flush () {\n        for (var i = 0; i < this.writeBuffer.length; i++) {\n          var write = this.writeBuffer[i]\n          if (write.id[0] !== null) {\n            yield* super.put(write)\n            this.writeBuffer[i] = {\n              id: [null, null]\n            }\n          }\n        }\n      }\n    }\n    return SmallLookupBuffer\n  }\n  Y.utils.createSmallLookupBuffer = createSmallLookupBuffer\n}\n","/* @flow */\n'use strict'\n\nrequire('./Connector.js')(Y)\nrequire('./Database.js')(Y)\nrequire('./Transaction.js')(Y)\nrequire('./Struct.js')(Y)\nrequire('./Utils.js')(Y)\nrequire('./Connectors/Test.js')(Y)\n\nvar requiringModules = {}\n\nmodule.exports = Y\nY.requiringModules = requiringModules\n\nY.extend = function (name, value) {\n  if (arguments.length === 2 && typeof name === 'string') {\n    if (value instanceof Y.utils.CustomTypeDefinition) {\n      Y[name] = value.parseArguments\n    } else {\n      Y[name] = value\n    }\n    if (requiringModules[name] != null) {\n      requiringModules[name].resolve()\n      delete requiringModules[name]\n    }\n  } else {\n    for (var i = 0; i < arguments.length; i++) {\n      var f = arguments[i]\n      if (typeof f === 'function') {\n        f(Y)\n      } else {\n        throw new Error('Expected function!')\n      }\n    }\n  }\n}\n\nY.requestModules = requestModules\nfunction requestModules (modules, sourceDir) {\n  sourceDir = sourceDir || '/bower_components'\n  // determine if this module was compiled for es5 or es6 (y.js vs. y.es6)\n  // if Insert.execute is a Function, then it isnt a generator..\n  // then load the es5(.js) files..\n  var extention = typeof regeneratorRuntime !== 'undefined' ? '.js' : '.es6'\n  var promises = []\n  for (var i = 0; i < modules.length; i++) {\n    var module = modules[i].split('(')[0]\n    var modulename = 'y-' + module.toLowerCase()\n    if (Y[module] == null) {\n      if (requiringModules[module] == null) {\n        // module does not exist\n        if (typeof window !== 'undefined' && window.Y !== 'undefined') {\n          var imported = document.createElement('script')\n          imported.src = sourceDir + '/' + modulename + '/' + modulename + extention\n          document.head.appendChild(imported)\n\n          let requireModule = {}\n          requiringModules[module] = requireModule\n          requireModule.promise = new Promise(function (resolve) {\n            requireModule.resolve = resolve\n          })\n          promises.push(requireModule.promise)\n        } else {\n          console.info('YJS: Please do not depend on automatic requiring of modules anymore! Extend modules as follows `require(\\'y-modulename\\')(Y)`')\n          require(modulename)(Y)\n        }\n      } else {\n        promises.push(requiringModules[modules[i]].promise)\n      }\n    }\n  }\n  return Promise.all(promises)\n}\n\n/* ::\ntype MemoryOptions = {\n  name: 'memory'\n}\ntype IndexedDBOptions = {\n  name: 'indexeddb',\n  namespace: string\n}\ntype DbOptions = MemoryOptions | IndexedDBOptions\n\ntype WebRTCOptions = {\n  name: 'webrtc',\n  room: string\n}\ntype WebsocketsClientOptions = {\n  name: 'websockets-client',\n  room: string\n}\ntype ConnectionOptions = WebRTCOptions | WebsocketsClientOptions\n\ntype YOptions = {\n  connector: ConnectionOptions,\n  db: DbOptions,\n  types: Array<TypeName>,\n  sourceDir: string,\n  share: {[key: string]: TypeName}\n}\n*/\n\nfunction Y (opts/* :YOptions */) /* :Promise<YConfig> */ {\n  opts.types = opts.types != null ? opts.types : []\n  var modules = [opts.db.name, opts.connector.name].concat(opts.types)\n  for (var name in opts.share) {\n    modules.push(opts.share[name])\n  }\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      Y.requestModules(modules, opts.sourceDir).then(function () {\n        if (opts == null) reject('An options object is expected! ')\n        else if (opts.connector == null) reject('You must specify a connector! (missing connector property)')\n        else if (opts.connector.name == null) reject('You must specify connector name! (missing connector.name property)')\n        else if (opts.db == null) reject('You must specify a database! (missing db property)')\n        else if (opts.connector.name == null) reject('You must specify db name! (missing db.name property)')\n        else if (opts.share == null) reject('You must specify a set of shared types!')\n        else {\n          var yconfig = new YConfig(opts)\n          yconfig.db.whenUserIdSet(function () {\n            yconfig.init(function () {\n              resolve(yconfig)\n            })\n          })\n        }\n      }).catch(reject)\n    }, 0)\n  })\n}\n\nclass YConfig {\n  /* ::\n  db: Y.AbstractDatabase;\n  connector: Y.AbstractConnector;\n  share: {[key: string]: any};\n  options: Object;\n  */\n  constructor (opts, callback) {\n    this.options = opts\n    this.db = new Y[opts.db.name](this, opts.db)\n    this.connector = new Y[opts.connector.name](this, opts.connector)\n  }\n  init (callback) {\n    var opts = this.options\n    var share = {}\n    this.share = share\n    this.db.requestTransaction(function * requestTransaction () {\n      // create shared object\n      for (var propertyname in opts.share) {\n        var typeConstructor = opts.share[propertyname].split('(')\n        var typeName = typeConstructor.splice(0, 1)\n        var type = Y[typeName]\n        var typedef = type.typeDefinition\n        var id = ['_', typedef.struct + '_' + typeName + '_' + propertyname + '_' + typeConstructor]\n        var args = []\n        if (typeConstructor.length === 1) {\n          try {\n            args = JSON.parse('[' + typeConstructor[0].split(')')[0] + ']')\n          } catch (e) {\n            throw new Error('Was not able to parse type definition! (share.' + propertyname + ')')\n          }\n          if (type.typeDefinition.parseArguments == null) {\n            throw new Error(typeName + ' does not expect arguments!')\n          } else {\n            args = typedef.parseArguments(args[0])[1]\n          }\n        }\n        share[propertyname] = yield* this.store.initType.call(this, id, args)\n      }\n      this.store.whenTransactionsFinished()\n        .then(callback)\n    })\n  }\n  isConnected () {\n    return this.connector.isSynced\n  }\n  disconnect () {\n    return this.connector.disconnect()\n  }\n  reconnect () {\n    return this.connector.reconnect()\n  }\n  destroy () {\n    if (this.connector.destroy != null) {\n      this.connector.destroy()\n    } else {\n      this.connector.disconnect()\n    }\n    var self = this\n    this.db.requestTransaction(function * () {\n      yield* self.db.destroy()\n      self.connector = null\n      self.db = null\n    })\n  }\n}\n\nif (typeof window !== 'undefined') {\n  window.Y = Y\n}\n"],"sourceRoot":"/source/"}