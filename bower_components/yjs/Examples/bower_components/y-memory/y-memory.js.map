{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/Memory.js","y-memory.js","src/RedBlackTree.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","extend","Y","Transaction","_Y$Transaction","store","this","_this","getPrototypeOf","ss","os","ds","Store","utils","RBTree","BufferedStore","createSmallLookupBuffer","Database","_Y$AbstractDatabase","y","opts","_this2","_createClass","key","requestTransaction","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","console","log","connector","userId","t0","delegateYield","getStateSet","t2","t1","logTable","gc1","gc2","warn","JSON","stringify","listenersById","listenersByIdExecuteNow","transactionInProgress","stop","makeGen","gen","res","done","getNextRequest","destroy","_context2","_get","AbstractDatabase","defineProperties","target","props","descriptor","defineProperty","protoProps","staticProps","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getter","./RedBlackTree.js","2","_typeof","Symbol","iterator","obj","N","val","color","_left","_right","_parent","id","tree","newParent","right","newRight","left","root","p","newLeft","set","findNext","findWithLowerBound","abrupt","findPrev","findWithUpperBound","from","smaller","to","_context3","findNodeWithLowerBound","_context4","findNodeWithUpperBound","iterate","_context5","findSmallestNode","compareIds","filter","_context7","o_","_context6","push","table","find","_context8","findNode","Array","_delete","d","isFakeChild","child","_context9","blacken","isBlack","isRed","_fixDelete","node","sibling","redden","rotateLeft","rotateRight","put","v","_context10","_fixInsert","uncle","getUncle","grandparent","flush","_context11"],"mappings":"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","file":"y-memory.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y) {\n  require('./RedBlackTree.js')(Y)\n  class Transaction extends Y.Transaction {\n    constructor (store) {\n      super(store)\n      this.store = store\n      this.ss = store.ss\n      this.os = store.os\n      this.ds = store.ds\n    }\n  }\n  var Store = Y.utils.RBTree\n  var BufferedStore = Y.utils.createSmallLookupBuffer(Store)\n\n  class Database extends Y.AbstractDatabase {\n    constructor (y, opts) {\n      super(y, opts)\n      this.os = new BufferedStore()\n      this.ds = new Store()\n      this.ss = new BufferedStore()\n    }\n    logTable () {\n      var self = this\n      self.requestTransaction(function * () {\n        console.log('User: ', this.store.y.connector.userId, \"==============================\") // eslint-disable-line\n        console.log(\"State Set (SS):\", yield* this.getStateSet()) // eslint-disable-line\n        console.log(\"Operation Store (OS):\") // eslint-disable-line\n        yield* this.os.logTable() // eslint-disable-line\n        console.log(\"Deletion Store (DS):\") //eslint-disable-line\n        yield* this.ds.logTable() // eslint-disable-line\n        if (this.store.gc1.length > 0 || this.store.gc2.length > 0) {\n          console.warn('GC1|2 not empty!', this.store.gc1, this.store.gc2)\n        }\n        if (JSON.stringify(this.store.listenersById) !== '{}') {\n          console.warn('listenersById not empty!')\n        }\n        if (JSON.stringify(this.store.listenersByIdExecuteNow) !== '[]') {\n          console.warn('listenersByIdExecuteNow not empty!')\n        }\n        if (this.store.transactionInProgress) {\n          console.warn('Transaction still in progress!')\n        }\n      }, true)\n    }\n    transact (makeGen) {\n      var t = new Transaction(this)\n      while (makeGen !== null) {\n        var gen = makeGen.call(t)\n        var res = gen.next()\n        while (!res.done) {\n          res = gen.next(res.value)\n        }\n        makeGen = this.getNextRequest()\n      }\n    }\n    * destroy () {\n      yield* super.destroy()\n      delete this.os\n      delete this.ss\n      delete this.ds\n    }\n  }\n  Y.extend('memory', Database)\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n",null,"'use strict'\n\n/*\n  This file contains a not so fancy implemantion of a Red Black Tree.\n*/\nmodule.exports = function (Y) {\n  class N {\n    // A created node is always red!\n    constructor (val) {\n      this.val = val\n      this.color = true\n      this._left = null\n      this._right = null\n      this._parent = null\n      if (val.id === null) {\n        throw new Error('You must define id!')\n      }\n    }\n    isRed () { return this.color }\n    isBlack () { return !this.color }\n    redden () { this.color = true; return this }\n    blacken () { this.color = false; return this }\n    get grandparent () {\n      return this.parent.parent\n    }\n    get parent () {\n      return this._parent\n    }\n    get sibling () {\n      return (this === this.parent.left)\n        ? this.parent.right : this.parent.left\n    }\n    get left () {\n      return this._left\n    }\n    get right () {\n      return this._right\n    }\n    set left (n) {\n      if (n !== null) {\n        n._parent = this\n      }\n      this._left = n\n    }\n    set right (n) {\n      if (n !== null) {\n        n._parent = this\n      }\n      this._right = n\n    }\n    rotateLeft (tree) {\n      var parent = this.parent\n      var newParent = this.right\n      var newRight = this.right.left\n      newParent.left = this\n      this.right = newRight\n      if (parent === null) {\n        tree.root = newParent\n        newParent._parent = null\n      } else if (parent.left === this) {\n        parent.left = newParent\n      } else if (parent.right === this) {\n        parent.right = newParent\n      } else {\n        throw new Error('The elements are wrongly connected!')\n      }\n    }\n    next () {\n      if (this.right !== null) {\n        // search the most left node in the right tree\n        var o = this.right\n        while (o.left !== null) {\n          o = o.left\n        }\n        return o\n      } else {\n        var p = this\n        while (p.parent !== null && p !== p.parent.left) {\n          p = p.parent\n        }\n        return p.parent\n      }\n    }\n    prev () {\n      if (this.left !== null) {\n        // search the most right node in the left tree\n        var o = this.left\n        while (o.right !== null) {\n          o = o.right\n        }\n        return o\n      } else {\n        var p = this\n        while (p.parent !== null && p !== p.parent.right) {\n          p = p.parent\n        }\n        return p.parent\n      }\n    }\n    rotateRight (tree) {\n      var parent = this.parent\n      var newParent = this.left\n      var newLeft = this.left.right\n      newParent.right = this\n      this.left = newLeft\n      if (parent === null) {\n        tree.root = newParent\n        newParent._parent = null\n      } else if (parent.left === this) {\n        parent.left = newParent\n      } else if (parent.right === this) {\n        parent.right = newParent\n      } else {\n        throw new Error('The elements are wrongly connected!')\n      }\n    }\n    getUncle () {\n      // we can assume that grandparent exists when this is called!\n      if (this.parent === this.parent.parent.left) {\n        return this.parent.parent.right\n      } else {\n        return this.parent.parent.left\n      }\n    }\n  }\n\n  class RBTree {\n    constructor () {\n      this.root = null\n      this.length = 0\n    }\n    * findNext (id) {\n      return yield* this.findWithLowerBound([id[0], id[1] + 1])\n    }\n    * findPrev (id) {\n      return yield* this.findWithUpperBound([id[0], id[1] - 1])\n    }\n    findNodeWithLowerBound (from) {\n      if (from === void 0) {\n        throw new Error('You must define from!')\n      }\n      var o = this.root\n      if (o === null) {\n        return null\n      } else {\n        while (true) {\n          if ((from === null || Y.utils.smaller(from, o.val.id)) && o.left !== null) {\n            // o is included in the bound\n            // try to find an element that is closer to the bound\n            o = o.left\n          } else if (from !== null && Y.utils.smaller(o.val.id, from)) {\n            // o is not within the bound, maybe one of the right elements is..\n            if (o.right !== null) {\n              o = o.right\n            } else {\n              // there is no right element. Search for the next bigger element,\n              // this should be within the bounds\n              return o.next()\n            }\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    findNodeWithUpperBound (to) {\n      if (to === void 0) {\n        throw new Error('You must define from!')\n      }\n      var o = this.root\n      if (o === null) {\n        return null\n      } else {\n        while (true) {\n          if ((to === null || Y.utils.smaller(o.val.id, to)) && o.right !== null) {\n            // o is included in the bound\n            // try to find an element that is closer to the bound\n            o = o.right\n          } else if (to !== null && Y.utils.smaller(to, o.val.id)) {\n            // o is not within the bound, maybe one of the left elements is..\n            if (o.left !== null) {\n              o = o.left\n            } else {\n              // there is no left element. Search for the prev smaller element,\n              // this should be within the bounds\n              return o.prev()\n            }\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    findSmallestNode () {\n      var o = this.root\n      while (o != null && o.left != null) {\n        o = o.left\n      }\n      return o\n    }\n    * findWithLowerBound (from) {\n      var n = this.findNodeWithLowerBound(from)\n      return n == null ? null : n.val\n    }\n    * findWithUpperBound (to) {\n      var n = this.findNodeWithUpperBound(to)\n      return n == null ? null : n.val\n    }\n    * iterate (t, from, to, f) {\n      var o\n      if (from === null) {\n        o = this.findSmallestNode()\n      } else {\n        o = this.findNodeWithLowerBound(from)\n      }\n      while (o !== null && (to === null || Y.utils.smaller(o.val.id, to) || Y.utils.compareIds(o.val.id, to))) {\n        yield* f.call(t, o.val)\n        o = o.next()\n      }\n      return true\n    }\n    * logTable (from, to, filter) {\n      if (filter == null) {\n        filter = function () {\n          return true\n        }\n      }\n      if (from == null) { from = null }\n      if (to == null) { to = null }\n      var os = []\n      yield* this.iterate(this, from, to, function * (o) {\n        if (filter(o)) {\n          var o_ = {}\n          for (var key in o) {\n            if (typeof o[key] === 'object') {\n              o_[key] = JSON.stringify(o[key])\n            } else {\n              o_[key] = o[key]\n            }\n          }\n          os.push(o_)\n        }\n      })\n      if (console.table != null) {\n        console.table(os)\n      }\n    }\n    * find (id) {\n      var n\n      return (n = this.findNode(id)) ? n.val : null\n    }\n    findNode (id) {\n      if (id == null || id.constructor !== Array) {\n        throw new Error('Expect id to be an array!')\n      }\n      var o = this.root\n      if (o === null) {\n        return false\n      } else {\n        while (true) {\n          if (o === null) {\n            return false\n          }\n          if (Y.utils.smaller(id, o.val.id)) {\n            o = o.left\n          } else if (Y.utils.smaller(o.val.id, id)) {\n            o = o.right\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    * delete (id) {\n      if (id == null || id.constructor !== Array) {\n        throw new Error('id is expected to be an Array!')\n      }\n      var d = this.findNode(id)\n      if (d == null) {\n        // throw new Error('Element does not exist!')\n        return\n      }\n      this.length--\n      if (d.left !== null && d.right !== null) {\n        // switch d with the greates element in the left subtree.\n        // o should have at most one child.\n        var o = d.left\n        // find\n        while (o.right !== null) {\n          o = o.right\n        }\n        // switch\n        d.val = o.val\n        d = o\n      }\n      // d has at most one child\n      // let n be the node that replaces d\n      var isFakeChild\n      var child = d.left || d.right\n      if (child === null) {\n        isFakeChild = true\n        child = new N({id: 0})\n        child.blacken()\n        d.right = child\n      } else {\n        isFakeChild = false\n      }\n\n      if (d.parent === null) {\n        if (!isFakeChild) {\n          this.root = child\n          child.blacken()\n          child._parent = null\n        } else {\n          this.root = null\n        }\n        return\n      } else if (d.parent.left === d) {\n        d.parent.left = child\n      } else if (d.parent.right === d) {\n        d.parent.right = child\n      } else {\n        throw new Error('Impossible!')\n      }\n      if (d.isBlack()) {\n        if (child.isRed()) {\n          child.blacken()\n        } else {\n          this._fixDelete(child)\n        }\n      }\n      this.root.blacken()\n      if (isFakeChild) {\n        if (child.parent.left === child) {\n          child.parent.left = null\n        } else if (child.parent.right === child) {\n          child.parent.right = null\n        } else {\n          throw new Error('Impossible #3')\n        }\n      }\n    }\n    _fixDelete (n) {\n      function isBlack (node) {\n        return node !== null ? node.isBlack() : true\n      }\n      function isRed (node) {\n        return node !== null ? node.isRed() : false\n      }\n      if (n.parent === null) {\n        // this can only be called after the first iteration of fixDelete.\n        return\n      }\n      // d was already replaced by the child\n      // d is not the root\n      // d and child are black\n      var sibling = n.sibling\n      if (isRed(sibling)) {\n        // make sibling the grandfather\n        n.parent.redden()\n        sibling.blacken()\n        if (n === n.parent.left) {\n          n.parent.rotateLeft(this)\n        } else if (n === n.parent.right) {\n          n.parent.rotateRight(this)\n        } else {\n          throw new Error('Impossible #2')\n        }\n        sibling = n.sibling\n      }\n      // parent, sibling, and children of n are black\n      if (n.parent.isBlack() &&\n        sibling.isBlack() &&\n        isBlack(sibling.left) &&\n        isBlack(sibling.right)\n      ) {\n        sibling.redden()\n        this._fixDelete(n.parent)\n      } else if (n.parent.isRed() &&\n        sibling.isBlack() &&\n        isBlack(sibling.left) &&\n        isBlack(sibling.right)\n      ) {\n        sibling.redden()\n        n.parent.blacken()\n      } else {\n        if (n === n.parent.left &&\n          sibling.isBlack() &&\n          isRed(sibling.left) &&\n          isBlack(sibling.right)\n        ) {\n          sibling.redden()\n          sibling.left.blacken()\n          sibling.rotateRight(this)\n          sibling = n.sibling\n        } else if (n === n.parent.right &&\n          sibling.isBlack() &&\n          isRed(sibling.right) &&\n          isBlack(sibling.left)\n        ) {\n          sibling.redden()\n          sibling.right.blacken()\n          sibling.rotateLeft(this)\n          sibling = n.sibling\n        }\n        sibling.color = n.parent.color\n        n.parent.blacken()\n        if (n === n.parent.left) {\n          sibling.right.blacken()\n          n.parent.rotateLeft(this)\n        } else {\n          sibling.left.blacken()\n          n.parent.rotateRight(this)\n        }\n      }\n    }\n    * put (v) {\n      if (v == null || v.id == null || v.id.constructor !== Array) {\n        throw new Error('v is expected to have an id property which is an Array!')\n      }\n      var node = new N(v)\n      if (this.root !== null) {\n        var p = this.root // p abbrev. parent\n        while (true) {\n          if (Y.utils.smaller(node.val.id, p.val.id)) {\n            if (p.left === null) {\n              p.left = node\n              break\n            } else {\n              p = p.left\n            }\n          } else if (Y.utils.smaller(p.val.id, node.val.id)) {\n            if (p.right === null) {\n              p.right = node\n              break\n            } else {\n              p = p.right\n            }\n          } else {\n            p.val = node.val\n            return p\n          }\n        }\n        this._fixInsert(node)\n      } else {\n        this.root = node\n      }\n      this.length++\n      this.root.blacken()\n      return node\n    }\n    _fixInsert (n) {\n      if (n.parent === null) {\n        n.blacken()\n        return\n      } else if (n.parent.isBlack()) {\n        return\n      }\n      var uncle = n.getUncle()\n      if (uncle !== null && uncle.isRed()) {\n        // Note: parent: red, uncle: red\n        n.parent.blacken()\n        uncle.blacken()\n        n.grandparent.redden()\n        this._fixInsert(n.grandparent)\n      } else {\n        // Note: parent: red, uncle: black or null\n        // Now we transform the tree in such a way that\n        // either of these holds:\n        //   1) grandparent.left.isRed\n        //     and grandparent.left.left.isRed\n        //   2) grandparent.right.isRed\n        //     and grandparent.right.right.isRed\n        if (n === n.parent.right && n.parent === n.grandparent.left) {\n          n.parent.rotateLeft(this)\n          // Since we rotated and want to use the previous\n          // cases, we need to set n in such a way that\n          // n.parent.isRed again\n          n = n.left\n        } else if (n === n.parent.left && n.parent === n.grandparent.right) {\n          n.parent.rotateRight(this)\n          // see above\n          n = n.right\n        }\n        // Case 1) or 2) hold from here on.\n        // Now traverse grandparent, make parent a black node\n        // on the highest level which holds two red nodes.\n        n.parent.blacken()\n        n.grandparent.redden()\n        if (n === n.parent.left) {\n          // Case 1\n          n.grandparent.rotateRight(this)\n        } else {\n          // Case 2\n          n.grandparent.rotateLeft(this)\n        }\n      }\n    }\n    * flush () {}\n  }\n\n  Y.utils.RBTree = RBTree\n}\n"],"sourceRoot":"/source/"}