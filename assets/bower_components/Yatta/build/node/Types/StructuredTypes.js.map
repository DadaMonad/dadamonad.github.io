{"version":3,"sources":["Types/StructuredTypes.coffee"],"names":[],"mappings":"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","file":"Types/StructuredTypes.js","sourceRoot":"/source/","sourcesContent":["basic_types_uninitialized = require \"./BasicTypes\"\n\nmodule.exports = (HB)->\n  basic_types = basic_types_uninitialized HB\n  types = basic_types.types\n  parser = basic_types.parser\n\n  #\n  # @nodoc\n  # Manages map like objects. E.g. Json-Type and XML attributes.\n  #\n  class MapManager extends types.Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    #\n    constructor: (uid)->\n      @map = {}\n      super uid\n\n    type: \"MapManager\"\n\n    applyDelete: ()->\n      for name,p of @map\n        p.applyDelete()\n      super()\n\n    cleanup: ()->\n      super()\n\n    #\n    # @see JsonTypes.val\n    #\n    val: (name, content)->\n      if content?\n        if not @map[name]?\n          (new AddName undefined, @, name).execute()\n        @map[name].replace content\n        @\n      else if name?\n        prop = @map[name]\n        if prop? and not prop.isContentDeleted()\n          obj = prop.val()\n          if obj instanceof types.ImmutableObject\n            obj.val()\n          else\n            obj\n        else\n          undefined\n      else\n        result = {}\n        for name,o of @map\n          if not o.isContentDeleted()\n            obj = o.val()\n            if obj instanceof types.ImmutableObject # or obj instanceof MapManager TODO: do you want deep json? \n              obj = obj.val()\n            result[name] = obj\n        result\n\n    delete: (name)->\n      @map[name]?.deleteContent()\n      @\n  #\n  # @nodoc\n  # When a new property in a map manager is created, then the uids of the inserted Operations\n  # must be unique (think about concurrent operations). Therefore only an AddName operation is allowed to\n  # add a property in a MapManager. If two AddName operations on the same MapManager name happen concurrently\n  # only one will AddName operation will be executed.\n  #\n  class AddName extends types.Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Object} map_manager Uid or reference to the MapManager.\n    # @param {String} name Name of the property that will be added.\n    #\n    constructor: (uid, map_manager, @name)->\n      @saveOperation 'map_manager', map_manager\n      super uid\n\n    type: \"AddName\"\n\n    applyDelete: ()->\n      super()\n\n    cleanup: ()->\n      super()\n\n    #\n    # If map_manager doesn't have the property name, then add it.\n    # The ReplaceManager that is being written on the property is unique\n    # in such a way that if AddName is executed (from another peer) it will\n    # always have the same result (ReplaceManager, and its beginning and end are the same)\n    #\n    execute: ()->\n      if not @validateSavedOperations()\n        return false\n      else\n        # helper for cloning an object\n        clone = (o)->\n          p = {}\n          for name,value of o\n            p[name] = value\n          p\n        uid_r = clone(@map_manager.getUid())\n        uid_r.doSync = false\n        uid_r.op_number = \"_#{uid_r.op_number}_RM_#{@name}\"\n        if not HB.getOperation(uid_r)?\n          uid_beg = clone(uid_r)\n          uid_beg.op_number = \"#{uid_r.op_number}_beginning\"\n          uid_end = clone(uid_r)\n          uid_end.op_number = \"#{uid_r.op_number}_end\"\n          beg = (new types.Delimiter uid_beg, undefined, uid_end).execute()\n          end = (new types.Delimiter uid_end, beg, undefined).execute()\n          event_properties =\n            name: @name\n          event_this = @map_manager\n          @map_manager.map[@name] = new ReplaceManager event_properties, event_this, uid_r, beg, end\n          @map_manager.map[@name].setParent @map_manager, @name\n          (@map_manager.map[@name].add_name_ops ?= []).push @\n          @map_manager.map[@name].execute()\n        super\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      {\n        'type' : \"AddName\"\n        'uid' : @getUid()\n        'map_manager' : @map_manager.getUid()\n        'name' : @name\n      }\n\n  parser['AddName'] = (json)->\n    {\n      'map_manager' : map_manager\n      'uid' : uid\n      'name' : name\n    } = json\n    new AddName uid, map_manager, name\n\n  #\n  # @nodoc\n  # Manages a list of Insert-type operations.\n  #\n  class ListManager extends types.Operation\n\n    #\n    # A ListManager maintains a non-empty list that has a beginning and an end (both Delimiters!)\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Delimiter} beginning Reference or Object.\n    # @param {Delimiter} end Reference or Object.\n    constructor: (uid, beginning, end, prev, next, origin)->\n      if beginning? and end?\n        @saveOperation 'beginning', beginning\n        @saveOperation 'end', end\n      else\n        @beginning = new types.Delimiter undefined, undefined, undefined\n        @end =       new types.Delimiter undefined, @beginning, undefined\n        @beginning.next_cl = @end\n        @beginning.execute()\n        @end.execute()\n      super uid, prev, next, origin\n\n    type: \"ListManager\"\n\n    #\n    # @private\n    # @see Operation.execute\n    #\n    execute: ()->\n      if @validateSavedOperations()\n        @beginning.setParent @\n        @end.setParent @\n        super\n      else\n        false\n\n    # Get the element previous to the delemiter at the end\n    getLastOperation: ()->\n      @end.prev_cl\n\n    # similar to the above\n    getFirstOperation: ()->\n      @beginning.next_cl\n\n    # Transforms the the list to an array\n    # Doesn't return left-right delimiter.\n    toArray: ()->\n      o = @beginning.next_cl\n      result = []\n      while o isnt @end\n        result.push o\n        o = o.next_cl\n      result\n\n    #\n    # Retrieves the x-th not deleted element.\n    # e.g. \"abc\" : the 1th character is \"a\"\n    # the 0th character is the left Delimiter\n    #\n    getOperationByPosition: (position)->\n      o = @beginning\n      while true\n        # find the i-th op\n        if o instanceof types.Delimiter and o.prev_cl?\n          # the user or you gave a position parameter that is to big\n          # for the current array. Therefore we reach a Delimiter.\n          # Then, we'll just return the last character.\n          o = o.prev_cl\n          while o.isDeleted() or not (o instanceof types.Delimiter)\n            o = o.prev_cl\n          break\n        if position <= 0 and not o.isDeleted()\n          break\n\n        o = o.next_cl\n        if not o.isDeleted()\n          position -= 1\n      o\n\n  #\n  # @nodoc\n  # Adds support for replace. The ReplaceManager manages Replaceable operations.\n  # Each Replaceable holds a value that is now replaceable.\n  #\n  # The WordType-type has implemented support for replace\n  # @see WordType\n  #\n  class ReplaceManager extends ListManager\n    #\n    # @param {Object} event_properties Decorates the event that is thrown by the RM\n    # @param {Object} event_this The object on which the event shall be executed\n    # @param {Operation} initial_content Initialize this with a Replaceable that holds the initial_content.\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Delimiter} beginning Reference or Object.\n    # @param {Delimiter} end Reference or Object.\n    constructor: (@event_properties, @event_this, uid, beginning, end, prev, next, origin)->\n      if not @event_properties['object']?\n        @event_properties['object'] = @event_this\n      super uid, beginning, end, prev, next, origin\n\n    type: \"ReplaceManager\"\n\n    applyDelete: ()->\n      o = @beginning\n      while o?\n        o.applyDelete()\n        o = o.next_cl\n      # if this was created by an AddName operation, delete it too\n      if @add_name_ops?\n        for o in @add_name_ops\n          o.applyDelete()\n      super()\n\n    cleanup: ()->\n      super()\n\n    #\n    # This doesn't throw the same events as the ListManager. Therefore, the\n    # Replaceables also not throw the same events.\n    # So, ReplaceManager and ListManager both implement\n    # these functions that are called when an Insertion is executed (at the end).\n    #\n    #\n    callEventDecorator: (events)->\n      if not @isDeleted()\n        for event in events\n          for name,prop of @event_properties\n            event[name] = prop\n        @event_this.callEvent events\n      undefined\n\n    #\n    # Replace the existing word with a new word.\n    #\n    # @param content {Operation} The new value of this ReplaceManager.\n    # @param replaceable_uid {UID} Optional: Unique id of the Replaceable that is created\n    #\n    replace: (content, replaceable_uid)->\n      o = @getLastOperation()\n      relp = (new Replaceable content, @, replaceable_uid, o, o.next_cl).execute()\n      # TODO: delete repl (for debugging)\n      undefined\n\n    isContentDeleted: ()->\n      @getLastOperation().isDeleted()\n\n    deleteContent: ()->\n      (new types.Delete undefined, @getLastOperation().uid).execute()\n      undefined\n\n    #\n    # Get the value of this WordType\n    # @return {String}\n    #\n    val: ()->\n      o = @getLastOperation()\n      #if o instanceof types.Delimiter\n        # throw new Error \"Replace Manager doesn't contain anything.\"\n      o.val?() # ? - for the case that (currently) the RM does not contain anything (then o is a Delimiter)\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      json =\n        {\n          'type': \"ReplaceManager\"\n          'uid' : @getUid()\n          'beginning' : @beginning.getUid()\n          'end' : @end.getUid()\n        }\n      if @prev_cl? and @next_cl?\n        json['prev'] = @prev_cl.getUid()\n        json['next'] = @next_cl.getUid()\n      if @origin? # TODO: do this everywhere: and @origin isnt @prev_cl\n        json[\"origin\"] = @origin().getUid()\n      json\n\n  parser[\"ReplaceManager\"] = (json)->\n    {\n      'uid' : uid\n      'prev': prev\n      'next': next\n      'origin' : origin\n      'beginning' : beginning\n      'end' : end\n    } = json\n    new ReplaceManager uid, beginning, end, prev, next, origin\n\n\n  #\n  # @nodoc\n  # The ReplaceManager manages Replaceables.\n  # @see ReplaceManager\n  #\n  class Replaceable extends types.Insert\n\n    #\n    # @param {Operation} content The value that this Replaceable holds.\n    # @param {ReplaceManager} parent Used to replace this Replaceable with another one.\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    #\n    constructor: (content, parent, uid, prev, next, origin)->\n      @saveOperation 'content', content\n      @saveOperation 'parent', parent\n      if not (prev? and next?)\n        throw new Error \"You must define prev, and next for Replaceable-types!\"\n      super uid, prev, next, origin\n\n    type: \"Replaceable\"\n\n    #\n    # Return the content that this operation holds.\n    #\n    val: ()->\n      @content\n\n    applyDelete: ()->\n      res = super\n      if @content?\n        if @next_cl.type isnt \"Delimiter\"\n          @content.deleteAllObservers()\n        @content.applyDelete()\n        @content.dontSync()\n      @content = null\n      res\n\n    cleanup: ()->\n      super\n\n    #\n    # This is called, when the Insert-type was successfully executed.\n    # TODO: consider doing this in a more consistent manner. This could also be\n    # done with execute. But currently, there are no specital Insert-types for ListManager.\n    #\n    callOperationSpecificInsertEvents: ()->\n      if @next_cl.type is \"Delimiter\" and @prev_cl.type isnt \"Delimiter\"\n        # this replaces another Replaceable\n        old_value = @prev_cl.content\n        @parent.callEventDecorator [\n          type: \"update\"\n          changedBy: @uid.creator\n          oldValue: old_value\n        ]\n        @prev_cl.applyDelete()\n      else if @next_cl.type isnt \"Delimiter\"\n        # This won't be recognized by the user, because another\n        # concurrent operation is set as the current value of the RM\n        @applyDelete()\n      else # prev _and_ next are Delimiters. This is the first created Replaceable in the RM\n        @parent.callEventDecorator [\n          type: \"add\"\n          changedBy: @uid.creator\n        ]\n      undefined\n\n    callOperationSpecificDeleteEvents: (o)->\n      if @next_cl.type is \"Delimiter\"\n        @parent.callEventDecorator [\n          type: \"delete\"\n          changedBy: o.uid.creator\n          oldValue: @content\n        ]\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      json =\n        {\n          'type': \"Replaceable\"\n          'content': @content?.getUid()\n          'ReplaceManager' : @parent.getUid()\n          'prev': @prev_cl.getUid()\n          'next': @next_cl.getUid()\n          'uid' : @getUid()\n        }\n      if @origin? and @origin isnt @prev_cl\n        json[\"origin\"] = @origin.getUid()\n      json\n\n  parser[\"Replaceable\"] = (json)->\n    {\n      'content' : content\n      'ReplaceManager' : parent\n      'uid' : uid\n      'prev': prev\n      'next': next\n      'origin' : origin\n    } = json\n    new Replaceable content, parent, uid, prev, next, origin\n\n  types['ListManager'] = ListManager\n  types['MapManager'] = MapManager\n  types['ReplaceManager'] = ReplaceManager\n  types['Replaceable'] = Replaceable\n\n  basic_types\n\n\n\n\n\n\n"]}